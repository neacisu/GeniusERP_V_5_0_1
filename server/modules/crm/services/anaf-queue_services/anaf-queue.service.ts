/**
 * Serviciul principal ANAF Queue
 * GestioneazƒÉ cererile cƒÉtre API-ul ANAF folosind BullMQ pentru a evita
 * depƒÉ»ôirea limitelor de rate (1 request/secundƒÉ, maximum 100 CUI-uri per cerere).
 * ImplementeazƒÉ caching, batch processing »ôi rate limiting.
 */

import { Queue, Worker, ConnectionOptions, Job } from 'bullmq';
import Redis from 'ioredis';
import { AnafCacheService } from './cache.service';
import { AnafDatabaseService } from './database.service';
import { AnafBatchService } from './batch.service';
import { AnafBatchRequest, AnafDataSource, AnafQueueConfig, AnafRequestResult, createDefaultConfig } from './types';
import { AnafCompanyData } from '../anaf.service';
import { anafService } from '../anaf.service';
import { v4 as uuidv4 } from 'uuid';
import { getRedisConfig } from '../../../../config/redis';
import * as dotenv from 'dotenv';
import { RedisService } from '../../../../services/redis.service';

export class AnafQueueService {
  private queue: Queue;
  private worker: Worker;
  private cacheService: AnafCacheService;
  private databaseService: AnafDatabaseService;
  private batchService: AnafBatchService;
  private config: AnafQueueConfig;
  private callbacks: Map<string, (result: AnafRequestResult) => void> = new Map();
  private initializeAttempts = 0;
  private maxInitializeAttempts = 5;
  private redisConnected = false;

  /**
   * Constructor pentru serviciul ANAF Queue
   * @param config Configura»õia pentru ANAF Queue
   */
  constructor(config?: Partial<AnafQueueConfig>) {
    this.config = createDefaultConfig(config);
    // Ini»õializƒÉm serviciile asincron, fƒÉrƒÉ a a»ôtepta finalizarea
    this.initializeServices().catch(err => {
      console.error('[AnafQueueService] Eroare la ini»õializarea asincronƒÉ:', err);
    });
  }

  /**
   * Ini»õializeazƒÉ serviciile »ôi conexiunile
   */
  private async initializeServices() {
    try {
      // CreƒÉm o conexiune Redis direct cu op»õiunile cerute de BullMQ
      console.log('[AnafQueueService] Ini»õializare cu conexiune Redis pentru BullMQ...');
      
      // Construim URL-ul complet Redis pentru a asigura autentificarea corectƒÉ
      const host = process.env.REDIS_HOST || 'localhost';
      const port = parseInt(process.env.REDIS_PORT || '6379', 10);
      const username = process.env.REDIS_USERNAME || '';
      const password = process.env.REDIS_PASSWORD || '';
      
      // Pentru depanare, afi»ôƒÉm informa»õii despre conexiune (fƒÉrƒÉ parola)
      console.log(`[AnafQueueService] Conectare la Redis: ${host}:${port}, utilizator: ${username || '[none]'}, parolƒÉ: ${password ? '[hidden]' : '[none]'}`);
      
      // Determina dacƒÉ utilizƒÉm Redis Cloud
      const isRedisCloud = host.includes('redis-cloud') || 
                          host.includes('cloud.redislabs.com') || 
                          host.includes('upstash.io') ||
                          host.includes('redis.cache.windows.net');
      
      // Nu folosim URL-uri pentru Redis pentru a evita probleme SSL
      // √én schimb, folosim op»õiuni directe
      console.log(`[AnafQueueService] Configurare Redis directƒÉ pentru: ${host}:${port}`);
      
      // BullMQ necesitƒÉ maxRetriesPerRequest = null
      const redisOptions = {
        host: host,
        port: port,
        username: username || undefined,
        password: password || undefined,
        maxRetriesPerRequest: null, // Obligatoriu pentru BullMQ
        enableReadyCheck: false,    // DezactiveazƒÉ verificƒÉri care pot cauza probleme
        retryStrategy: (times: number) => {
          if (times > 3) return null; // Oprim re√Æncercarea dupƒÉ 3 √ÆncercƒÉri
          return Math.min(times * 500, 3000); // √ént√¢rziere exponen»õialƒÉ
        },
      };
      
      // Nu activƒÉm TLS pentru a evita problemele SSL
      // Redis Cloud lucreazƒÉ »ôi fƒÉrƒÉ TLS pe porturile standard
      console.log(`[AnafQueueService] Op»õiuni Redis: ${JSON.stringify({
        ...redisOptions,
        password: redisOptions.password ? '[hidden]' : undefined
      })}`);
      
      const redisClient = new Redis(redisOptions);
      
      redisClient.on('error', (err) => {
        console.error('[AnafQueueService] Eroare Redis:', err.message);
      });
      
      // Op»õiuni pentru conexiunea BullMQ
      const connectionOptions: ConnectionOptions = {
        connection: redisClient
      };

      // CreƒÉm instan»õa Queue pentru procesarea batch-urilor
      this.queue = new Queue(this.config.queueName, connectionOptions);
      
      // AdƒÉugƒÉm handler pentru erori la coadƒÉ
      this.queue.on('error', (error) => {
        console.error(`[AnafQueueService] Eroare coadƒÉ: ${error.message}`);
      });
      
      // CreƒÉm instan»õele pentru serviciile componente
      this.cacheService = new AnafCacheService(this.config);
      this.databaseService = new AnafDatabaseService();
      this.batchService = new AnafBatchService(this.cacheService, this.databaseService);
      
      // CreƒÉm worker-ul pentru procesarea batch-urilor
      this.worker = new Worker(this.config.queueName, 
        async (job) => await this.processBatch(job),
        connectionOptions
      );

      // AsigurƒÉm-ne cƒÉ avem acces la date chiar dacƒÉ worker-ul √Ænt√¢mpinƒÉ erori
      this.worker.on('failed', (job, error) => {
        console.error(`[AnafQueueService] Eroare la procesarea job-ului ${job?.id}:`, error);
        
        // RecuperƒÉm erorile »ôi notificƒÉm callback-urile
        if (job?.data) {
          const batchData = job.data as AnafBatchRequest;
          
          // NotificƒÉm toate callback-urile cƒÉ a apƒÉrut o eroare
          for (const cui of batchData.cuiList) {
            const requestId = `${cui}_${batchData.requesterId}`;
            this.notifyRequestComplete(requestId, {
              company: null,
              error: new Error(`Eroare la procesarea cererii batch: ${error.message}`)
            });
          }
        }
      });
      
      this.redisConnected = true;
      console.log(`[AnafQueueService] Serviciu ini»õializat cu succes. Redis conectat.`);
    } catch (error) {
      console.error('[AnafQueueService] Eroare la ini»õializarea serviciilor:', error);
      this.redisConnected = false;
      
      // √én caz de eroare, √ÆncercƒÉm din nou doar de c√¢teva ori
      if (this.initializeAttempts < this.maxInitializeAttempts) {
        this.initializeAttempts++;
        console.log(`[AnafQueueService] Re√Æncercare conectare (${this.initializeAttempts}/${this.maxInitializeAttempts})...`);
        setTimeout(() => this.initializeServices(), 5000);
      }
    }
  }

  /**
   * Cere date despre o companie folosind CUI-ul
   * ImplementeazƒÉ strategia de caching »ôi batching
   * 
   * @param cui CUI-ul companiei
   * @param userId ID-ul utilizatorului care face cererea
   * @param companyId ID-ul companiei utilizatorului
   * @returns Promise cu datele companiei sau null dacƒÉ nu s-au gƒÉsit
   */
  async queueCompanyRequest(cui: string, userId: string, companyId: string): Promise<AnafCompanyData | null> {
    return new Promise<AnafCompanyData | null>(async (resolve, reject) => {
      try {
        // Verificare autentificare
        if (!userId || userId === 'anonymous' || userId === 'unknown') {
          console.error(`[AnafQueueService] ‚ùå Utilizator neautentificat (${userId}) pentru CUI ${cui}. Nu se poate continua.`);
          return reject(new Error('Nu sunte»õi autentificat. VƒÉ rugƒÉm sƒÉ vƒÉ autentifica»õi »ôi sƒÉ √Æncerca»õi din nou.'));
        }
        
        // ValidƒÉm CUI-ul
        if (!cui || typeof cui !== 'string' || cui.trim() === '') {
          console.error(`[AnafQueueService] ‚ùå CUI invalid sau gol: "${cui}"`);
          return reject(new Error('CUI invalid sau gol'));
        }
        
        // CurƒÉ»õƒÉm CUI-ul de prefixul RO »ôi spa»õii
        const cleanCui = cui.replace(/^RO/i, '').trim();
        
        console.log(`[AnafQueueService] üîç Cerere ANAF pentru CUI ${cleanCui} de la utilizator ${userId}, companie ${companyId}`);
        
        // VerificƒÉm mai √Ænt√¢i √Æn cache
        const cachedData = await this.cacheService.get(cleanCui);
        if (cachedData) {
          console.log(`[AnafQueueService] ‚úÖ Date gƒÉsite √Æn cache pentru CUI ${cleanCui}`);
          console.log('[AnafQueueService] Date √Æn cache: ', JSON.stringify(cachedData).substring(0, 200) + '...');
          
          // VerificƒÉm dacƒÉ datele existƒÉ »ôi √Æn baza de date
          const dbDataExists = await this.databaseService.getCompanyData(cleanCui);
          if (!dbDataExists) {
            // DacƒÉ datele nu existƒÉ √Æn baza de date, le salvƒÉm
            console.log(`[AnafQueueService] üîÑ Sincronizare date cache -> DB pentru CUI ${cleanCui}`);
            const savedToDB = await this.databaseService.saveCompanyData(cleanCui, cachedData);
            if (savedToDB) {
              console.log(`[AnafQueueService] ‚úÖ Date salvate cu succes √Æn DB din cache pentru CUI ${cleanCui}`);
            } else {
              console.error(`[AnafQueueService] ‚ùå Eroare la salvarea datelor din cache √Æn DB pentru CUI ${cleanCui}`);
            }
          } else {
            console.log(`[AnafQueueService] ‚ÑπÔ∏è Date existente √Æn DB pentru CUI ${cleanCui}`);
          }
          
          return resolve(cachedData);
        }
        
        // VerificƒÉm apoi √Æn baza de date
        const dbData = await this.databaseService.getCompanyData(cleanCui);
        if (dbData) {
          console.log(`[AnafQueueService] ‚úÖ Date gƒÉsite √Æn baza de date pentru CUI ${cleanCui}`);
          
          // SalvƒÉm √Æn cache pentru acces rapid ulterior
          await this.cacheService.set(cleanCui, dbData);
          
          return resolve(dbData);
        }
        
        // DacƒÉ nu avem date, facem o cerere nouƒÉ cƒÉtre API-ul ANAF
        console.log(`[AnafQueueService] Cerere nouƒÉ pentru CUI ${cui}`);
        
        // GenerƒÉm un ID unic pentru aceastƒÉ cerere
        const requestId = `${cui}_${userId}`;
        
        // √énregistrƒÉm un callback pentru a fi notifica»õi c√¢nd cererea este completƒÉ
        this.callbacks.set(requestId, (result: AnafRequestResult) => {
          if (result.error) {
            reject(result.error);
          } else {
            resolve(result.company);
          }
        });
        
        // AdƒÉugƒÉm cererea la batch pentru procesare
        await this.batchService.addToBatch({
          cui,
          requesterId: userId,
          requesterCompanyId: companyId
        });
        
        // VerificƒÉm dacƒÉ batch-ul este gata de procesare
        const batch = await this.batchService.getBatchIfReady();
        
        if (batch) {
          // DacƒÉ batch-ul este gata, √Æl trimitem pentru procesare
          await this.queue.add('processBatch', batch, {
            removeOnComplete: true,
            removeOnFail: 5000,
            attempts: 3,
            backoff: {
              type: 'exponential',
              delay: 5000
            }
          });
        }
      } catch (error) {
        console.error(`[AnafQueueService] Eroare la procesarea cererii pentru CUI ${cui}:`, error);
        reject(error);
      }
    });
  }

  /**
   * ProceseazƒÉ un batch de cereri cƒÉtre API-ul ANAF
   * @param job Job-ul BullMQ
   */
  private async processBatch(job: Job): Promise<void> {
    const batchData = job.data as AnafBatchRequest;
    console.log(`[AnafQueueService] Procesare batch ${batchData.batchId} cu ${batchData.cuiList.length} CUI-uri`);
    
    try {
      // ApelƒÉm API-ul ANAF folosind serviciul ANAF
      const response = await anafService.queryAnaf(batchData.cuiList);
      
      // ProcesƒÉm rƒÉspunsul »ôi salvƒÉm datele
      if (response && response.found && Array.isArray(response.found)) {
        // Pentru fiecare companie gƒÉsitƒÉ, actualizƒÉm cache-ul »ôi baza de date
        for (const company of response.found) {
          // Ob»õinem CUI-ul companiei din obiectul date_generale
          const cui = company.date_generale?.cui || '';
          console.log(`[AnafQueueService] Procesare date pentru CUI ${cui} din API`);
          console.log('[AnafQueueService] Date primite: ', JSON.stringify(company).substring(0, 200) + '...');
          
          // SalvƒÉm √Æn cache
          await this.cacheService.set(cui, company);
          
          // SalvƒÉm √Æn baza de date »ôi verificƒÉm rezultatul
          const savedToDB = await this.databaseService.saveCompanyData(cui, company);
          if (savedToDB) {
            console.log(`[AnafQueueService] ‚úÖ Date salvate cu succes √Æn DB pentru CUI ${cui}`);
          } else {
            console.error(`[AnafQueueService] ‚ùå Eroare la salvarea datelor √Æn DB pentru CUI ${cui}`);
          }
          
          // NotificƒÉm callback-ul cƒÉ datele sunt disponibile
          const requestId = `${cui}_${batchData.requesterId}`;
          this.notifyRequestComplete(requestId, { 
            company, 
            source: AnafDataSource.API 
          });
        }
      }
      
      // Pentru CUI-urile care nu au fost gƒÉsite, notificƒÉm callback-urile
      if (response && response.notFound && Array.isArray(response.notFound)) {
        for (const cui of response.notFound) {
          const requestId = `${cui}_${batchData.requesterId}`;
          this.notifyRequestComplete(requestId, { 
            company: null,
            source: AnafDataSource.API
          });
        }
      }
    } catch (error) {
      console.error(`[AnafQueueService] Eroare la procesarea batch-ului ${batchData.batchId}:`, error);
      
      // √én caz de eroare, notificƒÉm toate callback-urile
      for (const cui of batchData.cuiList) {
        const requestId = `${cui}_${batchData.requesterId}`;
        this.notifyRequestComplete(requestId, {
          company: null,
          error: error instanceof Error ? error : new Error('Eroare necunoscutƒÉ la procesarea batch-ului')
        });
      }
    }
  }

  /**
   * NotificƒÉ callback-urile cƒÉ o cerere a fost completatƒÉ
   * @param cui CUI-ul companiei
   * @param result Rezultatul cererii
   */
  private notifyRequestComplete(requestId: string, result: AnafRequestResult): void {
    // GƒÉsim callback-ul pentru acest CUI »ôi √Æl apelƒÉm
    const callback = this.callbacks.get(requestId);
    if (callback) {
      callback(result);
      this.callbacks.delete(requestId);
    }
  }

  /**
   * √énchide conexiunile »ôi elibereazƒÉ resursele
   */
  async close(): Promise<void> {
    try {
      console.log('[AnafQueueService] √énchidere serviciu...');
      
      // √énchidem componentele √Æn ordine
      if (this.worker) {
        await this.worker.close();
      }
      
      if (this.queue) {
        await this.queue.close();
      }
      
      await this.cacheService.close();
      
      console.log('[AnafQueueService] Serviciu √Ænchis cu succes');
    } catch (error) {
      console.error('[AnafQueueService] Eroare la √Ænchiderea serviciului:', error);
    }
  }
}

// CreƒÉm »ôi exportƒÉm o singurƒÉ instan»õƒÉ a serviciului
const anafQueueService = new AnafQueueService();
export { anafQueueService };
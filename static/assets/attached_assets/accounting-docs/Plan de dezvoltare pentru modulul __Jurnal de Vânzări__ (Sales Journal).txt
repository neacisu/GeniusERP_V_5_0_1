Plan de dezvoltare pentru modulul Jurnal de Vânzări (Sales Journal)Analiză a cadrului legislativ și standardelor contabile (actualizată la oct. 2025)Obligația legală a Jurnalului de Vânzări: Conform legislației financiar-contabile românești, Jurnalul pentru Vânzări este un registru contabil obligatoriu, folosit pentru înregistrarea tuturor vânzărilor de bunuri și servicii și determinarea TVA colectată lunar[1]. El este un registru auxiliar al Registrului-Jurnal general, menit să centralizeze livrările în scopul calculării decontului de TVA[2]. Potrivit OMFP 2634/2015 (normele privind documentele financiar-contabile) și Legii contabilității nr.82/1991, entitățile trebuie să întocmească acest jurnal în mod corect, cu pagini numerotate, fără ștersături sau spații libere, completat zilnic sau lunar, astfel încât să conțină toate elementele necesare determinării corecte a TVA datorate[3][4]. Jurnalul se întocmește într-un singur exemplar și se arhivează la departamentul financiar-contabil, fiind de asemenea un document de control folosit de organele fiscale pentru verificarea operațiunilor înregistrate[5][6].Conținut minim obligatoriu: În baza reglementărilor (OMFP 2634/2015 – Anexa 3, precum și normele Codului Fiscal), un jurnal de vânzări trebuie să includă, pentru fiecare factură de vânzare, informații precum: numărul curent, data și numărul documentului (facturii), denumirea și codul fiscal al clientului (CUI/CIF)[7][8], valoarea totală a facturii (inclusiv TVA), baza impozabilă și valoarea TVA defalcate pe cote și categorii de operațiuni. Mai exact, jurnalul are coloane separate pentru: baza și TVA aferente livrărilor taxabile cu cota standard (19%), cele cu cota redusă (9% și, după 2017, 5%) – fiecare cotă având propriile coloane de bază impozabilă și TVA; livrări scutite cu drept de deducere (de ex. exporturi, livrări intracomunitare), livrări scutite fără drept de deducere (ex. operațiuni scutite intern), livrări în regim special sau cu taxare inversă (unde TVA nu este colectată de vânzător) și eventual alte operațiuni neimpozabile ori sume care nu intră în baza de impozitare[9][10]. Structura corespunde cerințelor Codului Fiscal (Legea 227/2015) – de exemplu, livrările intracomunitare și exporturile trebuie evidențiate distinct (sunt scutite cu drept de deducere, art. 143 din Codul Fiscal), la fel livrările pe teritoriul național cu TVA 0% (scutiri fără drept de deducere) sau cu regimuri speciale. La sfârșitul fiecărei luni, jurnalul prezintă totalurile pe fiecare coloană și totalul general[11], facilitând întocmirea decontului de TVA (D300).TVA la încasare: O atenție deosebită în legislația actuală o are sistemul “TVA la încasare” (conform art.282 Cod Fiscal și Reg. de aplicare). Pentru firmele care aplică acest sistem, taxa devine exigibilă doar la momentul încasării facturii (nu la emitere). Legislația impune ca jurnalul de vânzări să reflecte distinct operațiunile încă neîncasate (TVA neexigibilă) față de cele încasate (exigibile). Practic, facturile emise în regim de TVA la încasare vor figura în jurnal cu întreaga bază și TVA, însă TVA-ul respectiv va fi marcat ca neexigibil până la încasare. Pe măsură ce facturile se încasează (integral sau parțial), sumele devin exigibile și trebuie evidențiate ca atare în jurnalul perioadei în care au fost încasate[12]. Formatul model pentru “Jurnal de vânzări - TVA la încasare” (conform modelului ANAF) prevede coloane suplimentare pentru a arăta, pentru fiecare factură, ce parte din baza și TVA este încasată (exigibilă) și ce parte rămâne neîncasată la sfârșitul perioadei[13][12]. Aplicația noastră trebuie deci să permită urmărirea acestor aspecte, pentru a fi conformă cu cerințele actuale.Alte reglementări actuale: Conform OMFP 2634/2015 (modificat prin OMFP 1447/2023), registrele contabile obligatorii (inclusiv jurnalul de vânzări) se păstrează în arhivă timp de 5 ani de la încheierea exercițiului financiar în care au fost întocmite[14]. Totodată, începând cu 2022, contribuabilii mari și, treptat, alții, trebuie să depună fișierul standard de control fiscal SAF-T (Declarația D406) către ANAF. Acest fișier include secțiuni detaliate cu facturile de vânzări și cumpărări, astfel că sistemul nostru ar trebui pregătit să furnizeze informațiile necesare (coduri fiscale parteneri, date facturi, conturi, detalii de taxă) într-un format standardizat. În perspectiva SAF-T, fiecare factură de vânzare ar trebui marcată cu tipul de tranzacție relevant (de ex. livrare internă, livrare intracomunitară, export etc.) și să existe posibilitatea de export al jurnalului de vânzări conform structurii cerute de ANAF.Pe scurt, din punct de vedere legal și contabil, aplicația trebuie să genereze un Jurnal de Vânzări care include toate câmpurile cerute de lege (dată, număr, client, CUI, detalii bază și TVA pe categorii)[7][9], să fie organizat pe categorii de operațiuni (taxabile, scutite, interne, externe etc.)[15], să evidențieze corect facturile stornate (cu valori negative) și particularitățile TVA la încasare, și să poată fi tipărit sau exportat în format adecvat (inclusiv Excel/PDF). Urmărind aceste cerințe, trecem la analiza aplicației existente și la planul de upgrade.Analiza situației actuale a aplicației existente (modul Invoicing/SalesJournal)Structura actuală a datelor: Aplicația are deja un sistem de gestiune a facturilor de vânzare prin modulul Invoicing, cu servicii și controlere dedicate (ex. SalesJournalService, SalesJournalController). Datele despre facturi sunt stocate într-o tabelă unificată invoices, care conține câmpurile esențiale: identificator unic, referință la companie (companyId) și client (customerId), număr de factură (serie + număr), date (emitere, scadență), sume și altele[16][17]. Facturile sunt diferențiate după un câmp type (de exemplu poate fi 'INVOICE' pentru factură normală, 'CREDIT_NOTE' pentru factură de storno, etc.)[18] și au un status de proces (ex. draft, issued, sent, canceled), definit printr-un enum în baza de date[19]. Liniile de detaliu ale fiecărei facturi sunt stocate în tabela invoice_lines, care include pentru fiecare poziție produsul/serviciul, cantitatea, prețul unitar și valorile calculate de net, TVA și total pe linie[20]. De asemenea, există o tabelă invoice_details pentru informații despre partener (client): nume, adresa, cod fiscal (CUI), număr de înregistrare la Registru, etc., împreună cu termene și metode de plată[21]. Aceste detalii de partener sunt esențiale pentru jurnal, întrucât asigură preluarea automată a denumirii și a codului de TVA al clientului pe fiecare intrare din jurnal.Logica de business existentă: SalesJournalController expune endpoint-uri REST pentru a lista facturile de vânzări cu filtrare (după dată, client, status)[22], pentru a obține detaliul unei facturi anume[23], precum și operațiuni CRUD (creare, actualizare, ștergere factură) și înregistrarea plăților[24][25]. Partea de service (SalesJournalService) folosește un ORM (Drizzle) pentru a interoga și modifica baza de date. De exemplu, metoda de listare getCustomerInvoices obține facturile filtrate și include automat liniile detaliu[26], calculând și numărul total de facturi pentru paginație. Observăm că, la salvarea/emiterea unei facturi, sistemul asociază acesteia și o înregistrare contabilă (prin ledgerEntryId): există un mecanism de generare a notelor contabile corespunzătoare vânzării, folosind conturi prestabilite (4111 – Client, 707 – Vânzări, 4427 – TVA colectată)[27][28]. Acest lucru este important, întrucât leagă jurnalul de vânzări de registrul contabil general: fiecare factură emisă generează o notă contabilă de vânzare (tipul LedgerEntryType.SALES) care conține articolele Debit/Credit corespunzătoare[29]. Facturile anulate (stornate) sunt marcate drept canceled în status, dar rămân în baza de date cu numărul alocat, prevenind realocarea acelui număr – deci continuitatea și unicitatea numerelor de facturi este asigurată prin constrângerea unică pe (serie, număr)[30]. Aceasta corespunde cerințelor legale de a nu avea “goluri” în seriile de facturare, chiar dacă o factură este anulată (ea trebuie păstrată în evidențe ca anulată).Lipsuri identificate: Deși datele necesare pentru jurnalul de vânzări există în sistem, aplicația nu oferă încă un raport formatat dedicat “Jurnal de Vânzări”. În interfață nu există un ecran sau un raport imprimabil care să prezinte toate facturile emise într-o perioadă, cu toate coloanele cerute (bază și TVA pe cote, categorii de livrări, etc.), ordonate cronologic. Practic, modulul actual permite listarea facturilor și filtrarea lor, însă pentru a obține un Jurnal de Vânzări conform legislației, ar fi nevoie de prelucrarea și gruparea acestor date.Un alt potențial neajuns este modul de evidențiere a facturilor storno/nota de credit. În schema de date există câmpul relatedInvoiceId pentru a lega o factură de storno de factura inițială[31], și în cod se creează în baza de date o nouă intrare în invoices cu type: 'CREDIT_NOTE' și referința la factura originară[32]. Totuși, în raportarea jurnalului de vânzări va trebui verificat cum apar aceste facturi de corecție – ideal, ele ar trebui listate cu valorile în negativ la bază și TVA, la cotele corespunzătoare, pentru a reduce totalurile lunii respective. Actualmente, faptul că facturile de storno sunt inserate cu status: 'CREDIT_NOTE'[33] indică o posibilă confuzie: în design se intenționa probabil folosirea câmpului type pentru a marca nota de credit, menținând status-ul ca issued. Această neconcordanță (utilizarea valorii 'CREDIT_NOTE' în coloana de status) trebuie corectată, întrucât enum-ul de status permis este restrictiv (draft/issued/sent/canceled)[19] – altfel, există risc de inconsistență la validarea datelor. De asemenea, s-a observat în cod utilizarea unui status intermediar 'VALIDATED' atunci când se salvează factura după generarea notei contabile[34], deși 'VALIDATED' nu este definit ca status acceptat în schema bazei de date. Acest status “provizoriu” contravine enumerării definite[19] și ar trebui înlocuit fie cu un status existent (ex. issued, semnalând că factura e emisă și contabilizată) și/sau marcat separat prin flag-ul isValidated (care există în schemă)[35].În plus, trebuie verificat fluxul de populare a tabelului invoice_details la crearea unei facturi. Din analiza codului, în metoda de creare createCustomerInvoice se primește un obiect customer cu datele clientului, însă implementarea actuală este incompletă (returnează doar un UUID fictiv, fără inserția propriu-zisă a facturii și a detaliilor)[36]. Așadar, va fi necesar să implementăm complet inserția facturii și a detaliilor sale (inclusiv CUI, adresă etc.), asigurând că fiecare factură emisă are în invoice_details informația despre client – esențială pentru generarea jurnalului (coloana de cod fiscal al clientului).TVA la încasare și plăți: În forma actuală, aplicația permite înregistrarea plăților încasate pentru o factură (metoda recordInvoicePayment din controller)[37], deși nu am identificat în cod o implementare detaliată a acestei funcții în service (posibil încă neimplementată sau în alt modul). Nu pare să existe încă o diferențiere automată între TVA exigibilă și neexigibilă în funcție de plata încasată. Totuși, în planul nostru, va trebui să introducem această logică: pentru firmele cu TVA la încasare, la emiterea facturii TVA-ul trebuie marcat ca neexigibil (probabil prin folosirea contului contabil 4428 în loc de 4427 și prin evidențiere în jurnal într-o coloană separată), iar la încasare aplicația să realizeze transferul de TVA (4428 -> 4427) și să reflecte suma colectată în jurnalul lunii respective. Acest comportament nu este încă implementat: de exemplu, funcția de generare a notelor contabile a facturii adaugă mereu credit pe contul 4427 (TVA colectată) dacă există TVA[38], indiferent dacă firma aplică TVA la încasare. Va fi necesară o condiționare suplimentară acolo.Recapitulare probleme de conformitate: În rezumat, aplicația stochează majoritatea datelor necesare (facturi, linii, detalii partener, legături la note contabile) și respectă în mare parte regulile de numerotare și conținut ale facturilor, însă nu oferă încă modul de raportare pentru Jurnalul de Vânzări conform formatului legal. Trebuie implementată această funcționalitate de raportare. Concomitent, e nevoie să corectăm mici erori/omisiuni în model (status-uri neconforme, completarea datelor de client), să extindem funcționalitatea pentru a acoperi toate scenariile fiscale (stornări, TVA la încasare, categorii de TVA diferite) și să îmbunătățim interfața pentru a permite utilizatorilor să obțină și să exporte jurnalul ușor. În continuare, propunem un plan concret, structurat pe pași, pentru implementarea acestor cerințe atât în back-end, cât și în front-end.Plan de acțiune propus pentru implementare și upgrade (Backend & Frontend)1. Actualizări ale modelului de date și al regulilor de business (conformitate legislativă):2. Revizuirea status-urilor facturilor: Ajustați enumerarea statusurilor și utilizarea lor în cod. În loc să folosiți 'VALIDATED' ca status suplimentar la salvarea facturii (după generarea notei contabile), folosiți statusul existent issued pentru a indica factura emisă definitiv, marcând totodată înregistrarea contabilă asociată. Se poate utiliza câmpul boolean isValidated (deja prezent în schemă) pentru a marca intern că factura a fost validată contabil (și are ledgerEntryId completat)[35]. Astfel, vom elimina valorile neacceptate (VALIDATED, CREDIT_NOTE) din coloana status și vom păstra doar valorile definite legal (draft, issued, sent, canceled etc.)[19]. Facturile de storno (note de credit) vor primi status „issued” (fiind și ele documente emise), dar vor fi diferențiate prin câmpul type = 'CREDIT_NOTE' și prin legătura relatedInvoiceId către factura corectată[18]. Această corecție asigură integritatea datelor și alinierea la modelul declarat al bazei de date.3. Popularea completă a datelor clientului: La creare sau editare de factură, implementați salvarea în invoice_details a informațiilor despre client: denumire, cod fiscal, număr înregistrare, adresă, țară etc. (aceste coloane există deja[21]). În modul actual, dacă aceste detalii nu sunt copiate din obiectul customer, trebuie adăugată logica în SalesJournalService.createCustomerInvoice (sau în alt layer service aferent) care să insereze un rând în invoice_details legat de factura nou creată. Toate facturile emise trebuie să aibă aceste câmpuri completate, altfel jurnalul nu poate include CUI-ul clientului cum cere legea.4. Adăugarea clasificării tranzacțiilor pentru jurnal: Introduceți în sistem conceptul de cod de TVA sau tip de operațiune pentru vânzări, astfel încât fiecare linie de factură (sau fiecare factură) să aibă un indicator al categoriei fiscale: de exemplu, 19%, 9%, 5% (cotă TVA internă), scutit cu drept, scutit fără drept, taxare inversă, neimpozabil etc. Aceasta se poate realiza fie prin extinderea modelului invoice_lines cu un atribut taxCode sau vatCategory (care să ia valori predefinite), fie printr-o tabelă separată de coduri de taxă (pe care liniile sau facturile să o refere). Multe ERP-uri (ex. EMSYS) permit definirea și maparea codurilor de TVA la coloanele jurnalului[39][40]. Pentru simplitate, s-ar putea porni cu o listă fixă de categorii (deduse automat unde posibil):o Dacă vatRate > 0 și clientul este intern, categoria este “Livrări taxabile cota X%”.o Dacă vatRate = 0, atunci: dacă clientul are cod de TVA valid și țară ≠ RO, categoria devine “Livrări intracomunitare” (dacă are și cod valid de TVA intracomunitar) sau “Export” (dacă țara e non-UE) – acestea sunt scutite cu drept de deducere; dacă clientul e intern dar factura are TVA 0% și există un motiv (de ex. operațiune scutită art.292 CF), marcați “Scutit fără drept”. Dacă produsul/serviciul indică taxare inversă (ex. un cod de taxă special), marcați “Taxare inversă”.o Introduceți aceste reguli în codul de generare a jurnalului, sau printr-o mapare configurabilă (ex.: o structură similară cu SALES_ACCOUNTS ar putea fi definită pentru VAT_CATEGORIES, sau un config în DB).5. Contabilitate TVA la încasare: Adăugați un atribut la nivel de factură sau de companie care să indice dacă se aplică mecanismul TVA la încasare. De exemplu, în tabela companies există deja un câmp fiscalCode și altele; se poate adăuga useCashVAT (boolean) sau, mai simplu, se poate deduce regimul din faptul că firma emitentă e înscrisă în Registrul de TVA la încasare (se poate ține o setare în profilul companiei). În funcție de acest flag, adaptați logica la emiterea facturii:o Dacă nu e TVA la încasare: comportament actual – cont TVA colectată 4427 creditat la emitere[38].o Dacă este TVA la încasare: în loc să creditați 4427, creditați contul 4428 “TVA neexigibilă” pentru suma TVA[38]. Păstrați în factura din invoices o indicație (poate coloana notes sau un nou boolean cashVATInvoice) că TVA e neexigibilă la emitere. De asemenea, asigurați-vă că în invoice_lines sau într-o structură legată se păstrează separat baza și TVA neexigibilă (în principiu tot vatAmount, dar știind că nu e încă datorată). Când se înregistrează o plată (invoice payment), implementați transferul de TVA: debitați 4428 și creditați 4427 pentru suma TVA aferentă încasată. Această operațiune poate fi generată automat în recordInvoicePayment – practic o notă contabilă de trecere a TVA din neexigibil în exigibil pentru suma încasată. Mark logic: dacă plata e parțială, doar proporțional din TVA devine exigibil (ex: la încasarea a 50% din factură, transferați 50% din TVA).Notă: Aceste ajustări de model și reguli vor asigura că, înainte de a genera raportul propriu-zis, avem datele corecte și complete: statusuri conforme, CUI client prezent, categorii de TVA identificabile și sume marcate dacă sunt neexigibile. Acest pas pregătitor este esențial pentru acuratețea raportării ulterioare.1. Implementarea generatorului de raport pentru Jurnalul de Vânzări (Back-end):Dezvoltați în cadrul SalesJournalService (sau într-un nou ReportService) o funcționalitate care să compileze datele din facturi într-o structură de jurnal. Aceasta va implica mai mulți sub-pași:2. Selecția datelor: Creați o metodă de genul generateSalesJournal(periodStart, periodEnd, companyId) care să interogheze baza de date pentru toate facturile emise (status = issued, sau canceled – dacă doriți să le includeți la poziția lor cronologică cu valoare 0) în intervalul dat. Cel mai probabil, jurnalul se generează lunar, deci parametrii ar fi luna și anul (ex. 10/2025). Asigurați-vă că se filtrează doar facturile companiei curente (multi-tenancy). Includeți toate legăturile relevante: liniile de factură și detaliile (client) – astfel încât să aveți într-o singură interogare toate informațiile.3. Structurarea pe categorii și cote de TVA: Parcurgeți fiecare factură și fiecare linie a sa. Pentru fiecare combinație factură + cotă TVA distinctă, creați o intrare în jurnal. Concret, dacă o factură are linii cu două cote de TVA (ex. 19% și 5%), în jurnal vor fi două rânduri pentru acea factură – unul pentru totalul bazei și TVA-ului la 19%, și unul pentru baza și TVA la 5%. Aceasta corespunde practicii de raportare: “apare câte o linie pentru fiecare cotă TVA de pe document”[41]. Similar, dacă o factură are o linie cu TVA și una scutită, se vor separa pe două linii (una la categoria taxabilă, alta la categoria scutită).o Determinați categoria fiecărei linii folosind regulile stabilite la pasul anterior (sau eventual în funcție de conturile contabile din nota generată – de exemplu, prezența contului 4427 vs 4426/4428 poate oferi indicii). De exemplu, dacă vatRate=19%, categorie = “Livrări taxabile 19%”; vatRate=0 + client extern = “Livrări intracomunitare” (dacă are CUI valid de TVA) sau “Export”; vatRate=0 + client intern neplătitor TVA = “Operațiuni scutite fără drept”; etc. Fiecare categorie va corespunde unei coloane în raport, dar pentru generare internă puteți eticheta liniile cu un cod (ex: CATEGORY_INTERNAL_19, CATEGORY_IC_DEST etc.) și apoi să agregați după aceste coduri.o Calculați suma bazei impozabile și a TVA pentru fiecare categorie per factură. În mod normal, într-o factură datele de bază și TVA sunt deja prezente pe fiecare linie (netAmount, vatAmount în invoice_lines[42]). Puteți rezuma: grupați liniile facturii după vatRate (și eventual alt criteriu, precum tip scutit vs taxare inversă) și faceți suma bazelor și a TVA. Atenție ca facturile de storno (tip CREDIT_NOTE) să fie luate cu valori negative – eventual detectați type=='CREDIT_NOTE' și tratați sumele ca negative în agregare. Astfel, dacă o factură storno are 100 lei bază la 19% și 19 lei TVA, în jurnal va apărea -100 bază la cota 19% și -19 TVA la cota 19%.4. Construirea rândurilor de jurnal: Pentru fiecare intrare astfel calculată, construiți un obiect/rând conținând: Nr. crt., Data facturii, Serie/Număr (concatenat dacă e cazul, ex: FVS-2025/0012), Client (Denumire), CUI client (din invoice_details.partnerFiscalCode[43]), Total factură (cu TVA), apoi câmpurile specifice categoriei: de ex., dacă e o livrare taxabilă 19%, puneți baza la col. “Baza 19%” și TVA la col. “TVA 19%”, celelalte categorii fiind zero; dacă e livrare intracomunitară, completați suma la col. “Livrări intracomunitare (bază)” și 0 la TVA, etc. În implementare, poate fi mai ușor să generați un set fix de coloane: (bază19, TVA19, bază9, TVA9, bază5, TVA5, bazăScutitDrept, bazăScutitFaraDrept, bazăInversa, bazăNeimpoz, etc.), populând doar coloana relevantă pentru rândul curent și zero pentru altele. Aceasta corespunde faptului că coloanele raportului sunt aceleași pentru toate categoriile, indiferent de caz[44]. (Veți avea multe coloane, dar interfața noastră va folosi scroll orizontal pentru a le afișa[45].)5. Tratament TVA la încasare: Integrați și informația despre încasări. Aici, abordarea poate fi:o Varianta simplificată: Pentru fiecare factură marcată ca TVA la încasare, la generarea jurnalului pentru luna emitere, puneți toată baza și TVA facturii la categoria sa, dar marcați TVA-ul ca neexigibil. Acest lucru poate fi făcut fie prin includerea unei coloane separate “TVA neexigibil” unde treceți valoarea TVA (și coloana “TVA exigibil” zero la emitere), fie printr-o notă/observație. Soluția mai curată este însă să aveți coloane dedicate: de exemplu, “Bază impozabilă (exigibilă)”, “TVA exigibilă”, “Bază impozabilă neexigibilă”, “TVA neexigibilă”. SmartBill, de pildă, menționează în jurnal coloane pentru Valoare încasată cu TVA, TVA exigibilă și TVA neexigibilă[46][47].o La generarea jurnalului pentru lunile următoare, dacă în acea lună are loc o încasare (parțială sau totală) a unei facturi anterioare cu TVA la încasare, atunci în jurnalul lunii curente ar trebui evidențiată acea sumă devenită exigibilă. Metoda practică: fie includeți factura respectivă din nou cu sumele încasate în coloana “TVA exigibilă” (și eventual baza corespunzătoare) și reduceți partea neexigibilă, fie introduceți un rând separat de ajustare a TVA. O abordare simplă este: la încasare, să generați un „pseudo-document” (un rând de jurnal) care referențiază factura inițială și indică sumele care devin exigibile. Pentru implementare, puteți trata plățile în modul generării jurnalului: interogați și tabela de plăți (dacă există) pentru perioada curentă, legați plățile de facturile lor și pentru fiecare plată a unei facturi cu TVA la încasare adăugați un rând de jurnal “Încasare factura X” cu sumele corespunzătoare mutate din neexigibil în exigibil. Astfel, totalul TVA exigibil al lunii va include atât TVA-ul facturilor emise normal în lună cât și TVA devenit exigibil din încasări anterioare, iar TVA neexigibil la finele lunii va scădea corespunzător.o Asigurați-vă că algoritmul evită dublarea: de exemplu, factura dintr-o lună anterioară nu trebuie listată integral din nou la încasare, ci doar partea relevantă. Puteți folosi coloana “Document de încasare” în jurnal pentru a indica referința (ex: chitanță/OP) atunci când prezentați sume încasate[48].6. Totaluri și verificări: După generarea tuturor rândurilor, agregați totalurile pe fiecare coloană de sume. Adăugați un rând TOTAL: la final, care să însumeze: total bază și TVA la 19%, total bază și TVA la 9%, ș.a.m.d., conform formatului standard[11]. Aceste totaluri trebuie să corespundă cu sumele ce vor fi raportate în decontul de TVA (ex: suma totală a bazelor la 19% și total TVA 19% corespund rândurilor de livrări taxabile ale decontului). Ca verificare internă, comparați totalul TVA colectată calculat din jurnal cu totalul contului 4427 din balanța contabilă sau cu sumatoria notelor contabile – ele trebuie să coincidă.7. Export și format: Implementați posibilitatea de a obține raportul în format Excel și PDF. În back-end, puteți fie să pregătiți datele și să le trimiteți la front-end (unde să fie formatate de client în Excel/PDF), fie să generați direct un fișier. Dat fiind că OMFP permite adaptarea formatelor documentelor financiar-contabile la necesitățile entității[49][50], vă puteți crea propriul șablon de export. În cazul nostru, clientul a furnizat un model Excel (atașat) – este indicat să respectăm acel layout. Asta înseamnă să așezăm coloanele exact în ordinea din modelul ANAF (conform fișierului Model_jurnal_vanzari_TVAlaincasare.xls): Nr. crt, Data, Nr. document, Client (Denumire), CUI, Total document, Bază 19%, TVA 19%, Bază 9%, TVA 9%, Bază 5%, TVA 5%, Livrări scutite cu drept (bază), Livrări scutite fără drept (bază), Livrări intracomunitare (bază), Exporturi (bază), Livrări cu taxare inversă (bază), etc., plus eventual “TVA neexigibil”/“exigibil” dacă se cere pentru TVA la încasare. Dacă modelul furnizat are și rubrici de “Observații” sau alte mențiuni (ex. număr încasare), includeți-le și completați-le corespunzător.8. Performanță: Dacă numărul de facturi e mare, luați în calcul generarea raportului în mod paginat sau streaming. Totuși, de obicei jurnalul lunar chiar și la firme mari rămâne într-o dimensiune gestionabilă (câteva mii de facturi). Asigurați-vă însă că folosirea ORM-ului este optimizată (eager loading pentru linii și detalii, evitarea interogărilor N+1). În plus, dacă folosiți TypeScript/JavaScript pentru generare, atenție la precizia zecimalelor (sume în RON cu 2 zecimale, rotunjiri corecte).Sfat: Verificați structurarea jurnalului generat comparând cu exemplul oferit de alte aplicații. De exemplu, SmartBill Conta grupează datele pe categorii mari în raportul detaliat (însă coloanele rămân aceleași)[15] – puteți de asemenea să grupați vizual rândurile generate: întâi toate livrările taxabile interne, apoi intracomunitare, etc., eventual intercalând rânduri sub-titlu (sau lăsând front-end-ul să le grupeze). Important e ca totalurile finale să fie corecte și să corespundă cumulat tuturor categoriilor.1. Integrarea cu modulul contabil (legătura jurnal – note contabile):2. Asigurați consistența dintre jurnalul de vânzări generat și înregistrările contabile. Fiecare factură emisă are asociat un ledgerEntryId și flag isValidated (după implementarea pasului 1)[51]. După generarea cu succes a notelor contabile pentru o factură, marcați factura isValidated=true și actualizați statusul la issued (dacă era draft). Acest flux se va sincroniza cu jurnalul: doar facturile validate (emise) apar în jurnal.3. Pentru facturile cu TVA la încasare, integrați în modulul de plăți următoarele: în momentul încasării unei facturi, pe lângă nota contabilă de trezorerie (4111 / 5121 de ex.), generați și nota de TVA (4428 -> 4427) astfel încât contabilitatea să reflecte TVA exigibil. Această notă poate fi generată de recordInvoicePayment sau de un subsistem de jurnal de bancă/casă. Important este să salvați undeva (poate în tabela payments sau într-o tabelă dedicată de “VAT movements”) informația despre TVA devenit exigibil, ca să o puteți include în jurnalul de vânzări. De exemplu, ați putea folosi invoice_details sau o nouă entitate pentru a nota la ce dată și ce sumă din TVA a fost încasată. Însă, dat fiind că oricum veți consulta plățile la generarea jurnalului, este suficient ca nota contabilă de plată să conțină referința la factura plătită și suma TVA transferată – din asta se poate deduce în jurnal.4. Verificare la nivel de conturi: După implementare, structura conturilor folosite ar trebui să fie:o 4427 (TVA colectată) reflectă exact totalul TVA exigibilă din jurnal (pe luna respectivă),o 4428 (TVA neexigibilă) la final de lună reflectă total TVA neexigibilă (facturi neîncasate) – care ar trebui să corespundă cu ce apare în jurnal la coloană neexigibil (sau diferența dintre total facturi la încasare și total exigibil).o Contul 707 (sau 704) total credit al lunii trebuie să corespundă sumei cumulate a bazelor impozabile taxabile (19%+9%+5% etc.) plus bazele scutite (practic total bază din toate categoriile).o Contul 4111 (Clienți) debit total lunii = total facturi emise (incl. TVA) – dacă nu s-au făcut încasări, sau = facturi emise + sold initial - incasari = sold final. Aceste corelații contabile ne asigură că jurnalul este complet.5. Export SAF-T (dacă este un obiectiv): Pregătiți datele astfel încât să puteți extrage ușor informațiile pentru fișierul SAF-T secțiunea “SalesInvoices”. Asta implică: asigurarea că fiecare factură are identificatori unici, datele partenerului completate, conturile contabile asociate tranzacției cunoscute (ceea ce avem), și codul de taxă (ex. standard, reduced, Out of scope etc.). Eventual, puteți marca tranzacțiile cu codurile SAF-T (de ex., O pentru operațiuni neimpozabile, E pentru scutite etc., conform cerințelor D406). Acest aspect poate fi planificat pentru o etapă ulterioară, dar având deja jurnalul implementat, extragerea datelor pentru SAF-T va fi mai simplă.6. Îmbunătățiri de interfață (Front-end) pentru Jurnalul de Vânzări:7. Adăugarea unei pagini de raport Jurnal Vânzări: În panoul aplicației (probabil în secțiunea Accounting/Rapoarte), creați o pagină dedicată Jurnalului de Vânzări. Aceasta va oferi utilizatorului opțiuni de filtrare a perioadei (lună/an sau interval de date) și un buton de generare vizualizare. După ce utilizatorul selectează perioada și dă “Generează”, front-end-ul va apela API-ul back-end (creat la pasul 2) pentru a primi datele jurnalului.8. Afișarea tabelară a jurnalului: Prezentarea va fi sub formă de tabel HTML scrollabil orizontal (deoarece numărul de coloane este mare)[45]. Realizați antetul tabelului conform formatului (inclusiv subdiviziuni dacă este cazul – de exemplu, coloana “Livrări taxabile” cu sub-coloane 19%, 9% etc., deși simplu ar fi fiecare coloană separată). În fiecare rând, afișați informațiile facturii și valorile pe coloane. Este util să evidențiați (prin grupare sau culori) categoriile de tranzacții: puteți sorta rândurile în așa fel încât toate livrările interne taxabile să fie împreună, apoi livrările intracomunitare etc., eventual inserând rânduri de subtotal pe categorie (opțional, pentru lizibilitate). Totuși, în formatul standard, aceste subtotale nu apar intercalate, ci doar la final cu “Total”. Decideți împreună cu utilizatorii dacă doresc separatoare de secțiuni; altfel, simpla ordonare cronologică a facturilor e acceptabilă atâta timp cât fiecare rând are o coloană care indică tipul (prin poziția în coloana corespunzătoare).9. Opțiuni de afișare detaliat/centralizat: O facilitate apreciată (conform exemplului SmartBill) este posibilitatea de a comuta între Raport detaliat (care listează fiecare factură, fiecare cotă pe rând separat) și Raport centralizat (care grupează valorile pe total categorii, fără detalii pe facturi)[52][53]. În etapa inițială, ne putem concentra pe varianta detaliată (obligatorie pentru evidențe și audit). Varianta centralizată se poate obține ușor ulterior agregând datele din detaliat (sumând pe categorii la nivel de lună). Dacă timpul permite, puteți oferi direct ambele: de exemplu, un toggle “Detaliat/Centralizat”. Centralizat – ar arăta în loc de fiecare factură, o singură linie pentru “Total livrări taxabile 19% luna X: bază = ..., TVA = ...”, etc., practic replicând exact recapitularea de pe decontul de TVA.10. Filtre și căutare: În interfața jurnalului detaliat, adăugați și filtre opționale, cum ar fi: filtru după client (pentru a vedea doar vânzările către un anumit client într-o perioadă), filtru după categorie (de ex. doar livrări intracomunitare)[54], sau căutare după număr de document[55]. Aceste funcționalități ajută la analiză, deși nu sunt cerințe legale – le putem prioritiza după ce funcția principală merge.11. Export user-friendly: Asigurați un buton de Export direct în UI, care să permită descărcarea jurnalului afișat în format Excel (XLS/XLSX) sau PDF[56]. Alegeți formatele în funcție de cerințele utilizatorilor: Excel e foarte util pentru contabili (permite prelucrări ulterioare), iar PDF e util pentru arhivare și prezentare oficială. Exportul ar trebui să reproducă exact ceea ce se vede pe ecran (inclusiv dacă e detaliat sau centralizat, filtrat etc.)[57]. Pentru PDF, generați-l în format landscape dat fiind numărul de coloane, cu posibilitate de a încăpea pe o pagină lată (sau două pagini unite). Pentru Excel, păstrați coloanele separate; dacă se poate, includeți și foaia de totaluri. Notă: Dacă folosiți o librărie de front-end pentru export (sau back-end), aveți grijă la formatarea numerelor ca text numeric și nu text simplu, la includerea eventualelor formule pentru total (opțional).12. Upgrade formular factură (UI): În ecranul de emitere/editare factură, după cum s-a menționat, s-ar putea să fie necesare câteva elemente noi:o O opțiune de aplicare TVA la încasare – dacă firma are posibilitatea de a emite atât facturi cu TVA la încasare cât și normal (de exemplu, dacă are plafon și face opt-in/out pentru anumiți clienți). Acest lucru se poate determina automat (toate facturile emise de o firmă care e în sistem TVA la încasare ar trebui marcate ca atare), dar e bine să fie vizibil. Poate fi doar un text informativ sau un checkbox ne-editabil care arată “TVA la încasare: DA/NU” în funcție de setarea companiei sau a clientului.o Posibilitatea de a alege cota TVA sau codul de taxă pe fiecare linie de factură. Dacă până acum aplicația calcula TVA doar pe baza unei cote implicite (de ex. standard sau ce era asociat produsului), ar fi util să permită selecția tipului de TVA: ex. un dropdown cu “19% (taxabil)”, “9% (taxabil)”, “0% – scutit cu drept (ex: cod...)”, “0% – scutit fără drept (art.292)”, “0% – neimpozabil (ex: non-UE)”, “Reverse charge (conform art. XXX)”, etc. Acest dropdown ar putea fi alimentat dintr-o listă de coduri de taxă configurabile în setări, similar cum sugerează EMSYS[39]. Alegerea corectă aici ar popula apoi corect vatRate și un eventual vatCategory intern pentru linie, pentru ca jurnalul să știe unde s-o pună. Dacă nu implementăm dropdown-ul, atunci măcar logică automată trebuie să existe (pe baza tipului clientului – intern/UE/extern și a setărilor produsului dacă e scutit). Dar pentru flexibilitate și validarea configurațiilor – cum solicită clientul – ar fi bine să permitem configurarea acestor coduri.o Afișarea clară a TVA-ului neexigibil la facturile cu TVA la încasare. De exemplu, după ce utilizatorul inserează linii și salvează factura, UI-ul poate afișa un mesaj de genul “Această factură este emisă în sistem TVA la încasare. TVA colectată (0 lei) va deveni exigibilă la momentul încasării.”, ca utilizatorul să știe. Nu e esențial, dar îmbunătățește transparența.13. UX și validare: Asigurați-vă că interfața jurnalului este ușor de folosit și de înțeles. Paginile ar trebui să se încarce într-un timp rezonabil. Dacă jurnalul are foarte multe rânduri, folosiți componente de tabel virtualizat (pentru performanță la scroll). Numerele ar trebui formatate cu separator de mii și două zecimale pentru sume, iar datele în format z dd.mm.yyyy. De asemenea, dacă sunt valori negative (de la facturi storno), evidențiați-le cu semnul “-” și eventual cu roșu sau paranteze, ca să fie clar. Puteți adăuga o legendă sau tooltip-uri pe capul de tabel pentru abrevieri (de ex., “Livrări intracomunitare” dacă e prescurtat etc.). Un alt aspect: dacă există cerințe speciale de la ANAF sau clienți privind formatul (de exemplu, un șablon fix în Excel cu anumite coloane sau ordini), țineți cont de ele – în cazul de față, avem atașat un model, deci ne ghidăm după el.14. Testare și validare finală:După implementare, este crucială o etapă amplă de testare pentru a garanta că noul jurnal de vânzări este corect și conform. Planul de test va acoperi:15. Teste unitare pe back-end: verificați funcțiile de generare a jurnalului cu situații specifice. De exemplu:o Factură simplă internă cu 19% TVA: apare un rând cu baza și TVA la 19%, restul coloanelor zero; totalul general reflectă acea sumă.o Factură cu două cote (ex. o linie la 19%, una la 9%): jurnalul trebuie să aibă două rânduri cu același număr și dată de factură, unul populat la col. 19%, altul la col. 9%.o Factură scutită (0%) către client extern (intracomunitar): rândul apare sub coloana “Livrări intracomunitare” cu baza, iar coloanele de TVA 0.o Factură scutită intern (ex. chirie către o firmă scutită de TVA): apare la “Scutit fără drept de deducere”.o Factură cu taxare inversă intern (ex. livrare de deșeuri feroase către o firmă înregistrată): ar trebui să apară cu baza în coloana “Taxare inversă” (și TVA 0, deoarece nu s-a colectat).o Notă de credit (storno) pentru o factură anterioară: generați o factură inițială și apoi una de storno legată. Verificați că în jurnal nota de credit apare cu valorile negative la aceleași coloane unde a apărut factura inițială (sau într-o categorie separată “ajustări negative”, în funcție de implementare). De exemplu, dacă factura inițială avea 100 lei bază la 19%, nota de credit -100 lei bază la 19%. Totalul cumulativ pe lună la col. 19% va fi 0 dacă a fost o anulare completă.o TVA la încasare – neîncasată: emiteți o factură cu TVA la încasare, nu înregistrați nicio plată. În jurnalul lunii respective, asigurați-vă că apare TVA la col. “neexigibilă” și nimic la exigibilă.o TVA la încasare – încasare parțială: pe factura de mai sus, înregistrați o plată de, să zicem, 50%. Rulați generarea jurnalului pentru luna plății: ar trebui să vedeți un rând (sau valori în coloane) care arată că o parte din TVA a devenit exigibilă (50% din bază și TVA la cota respectivă trec într-o coloană de exigibil, iar restul rămâne neexigibil). Verificați și că factura inițială, în jurnalul lunii sale, arată neexigibil integral.o Caz limită: factură emisă într-o lună și încasată integral în aceeași lună (dacă e TVA la încasare). Atunci jurnalul acelei luni ideal ar arăta factura cu TVA exigibil, deoarece s-a încasat înainte de final de lună. Algoritmul ar trebui să sesizeze asta (poate prin faptul că la generare vede că nu mai e nimic neîncasat).16. Testare integrată end-to-end: Utilizați aplicația prin interfață: creați facturi de diferite tipuri din UI, marcați-le ca emise, înregistrați plăți, apoi accesați ecranul Jurnal de Vânzări. Verificați că:o Datele afișate corespund cu cele introduse,o CUI-urile client apar corect (testați și cu clienți fără CUI – ex. persoane fizice, să vedeți cum apare; legal ar trebui să scrie “–” sau “0” dacă nu e plătitor de TVA),o Ordinea cronologică este respectată (facturile ordonate după data și numărul lor).o Exportul Excel/PDF descarcă un fișier corect deschis cu toate coloanele. Încercați să deschideți Excelul și să vă asigurați că cifrele sunt la locul lor și formulele de total (dacă le-ați pus) sunt corecte. PDF-ul – verificați layout-ul pe pagină.17. Validare cu expert contabil: Este recomandat să rulați câteva scenarii reale și să prezentați jurnalul generat unui contabil sau auditor pentru confirmare. Verificați împreună dacă formatul și conținutul corespund OMFP 2634/2015 și normelor Codului Fiscal. De exemplu, verificați dacă denumirile coloanelor corespund cu cele oficiale (conform anexelor din Monitorul Oficial) – dacă nu, ajustați-le (de ex., “Livrări scutite art. 292” etc., dacă se cere). Asigurați-vă că totalurile corespund cu decontul de TVA pe acel exemplu de lună (un cross-check foarte important!).18. Bug fixing: Remediați orice discrepanțe descoperite în testare. De exemplu, dacă observați că note de credit nu scad cum trebuie totalurile, sau că o factură marcată greșit la categorie ajunge în coloana nepotrivită, corectați regulile de atribuire a categoriei. Dacă apar probleme de performanță (timp mare de generare pentru foarte multe facturi), optimizați interogările (ex. generați printr-un query SQL dedicat cu GROUP BY, în loc de logică JS pură).În final, după iterațiile de test, ar trebui să obținem un Jurnal de Vânzări care este complet, exact și conform. Criteriile de acceptare: fiecare factură emisă are o intrare corespunzătoare în jurnal; sumele cumulate din jurnal sunt egale cu cele din contabilitate și decont; formatul raportului include toți indicatorii ceruți de legislație; nu există erori la export sau afișare.1. Lansare și instruirea utilizatorilor:2. Deploy & Migrations: Puneți în producție modificările, având grijă să rulați migrările de schemă (dacă am adăugat câmpuri noi, ex. vatCategory sau flags). Faceți backup la date înainte, fiind un modul sensibil.3. Documentare: Actualizați documentația aplicației (README, manual de utilizare) cu o secțiune despre Jurnalul de Vânzări. Explicați pe scurt utilitatea lui, unde se găsește în meniu, și cum se folosește filtrarea și exportul. Includeți și detalii despre interpretarea coloanelor, mai ales pentru utilizatorii care poate nu sunt contabili (ex. “Ce înseamnă 'Livrări cu taxare inversă'?”).4. Training: Dacă există personal contabil sau utilizatori finali, organizați o scurtă sesiune de prezentare a noii funcționalități. Arătați-le cum să genereze jurnalul pe o anumită lună, cum să verifice totalurile și să exporte. Subliniați că raportul este conform OMFP și poate fi prezentat auditorilor sau folosit la declarații. De asemenea, menționați noile câmpuri introduse (de ex., dacă acum la emiterea facturii li se cere să bifeze ceva sau să aleagă un cod de taxă, asigurați-vă că știu cum să procedeze și de ce e important).5. Feedback loop: Colectați feedback de la utilizatori după ce au folosit modulul în prima lună. Poate descoperă necesitatea unui mic ajustament (ex. ordonarea poate fi dorită după număr de document, nu strict dată; sau vor dori ca facturile anulate să nu apară deloc în jurnal, etc.). Fiți pregătit să faceți ajustări fine în versiuni următoare.În concluzie, prin pașii de mai sus vom realiza un upgrade major al aplicației pentru secțiunea Jurnal de Vânzări, aliniind-o integral la cerințele legislației fiscale și contabile românești în vigoare și aducând-o la nivelul funcțional al altor aplicații de contabilitate de pe piață. Vom avea un modul robust care: stochează toate datele necesare (inclusiv coduri fiscale și tipuri de tranzacții), generează automat raportul Jurnal de Vânzări pe orice perioadă, cu coloane și totaluri conforme cu OMFP 2634/2015 și Codul Fiscal[9][11], evidențiază corect situațiile speciale (stornări, regim TVA la încasare[12]), și permite utilizatorilor să vizualizeze, filtreze și exporte cu ușurință aceste date în format PDF/Excel. Astfel, aplicația va facilita atât conformarea legală (fiind pregătită și pentru eventuale raportări SAF-T), cât și verificarea internă rapidă a TVA colectate în fiecare lună, îndeplinind așteptările clienților și auditorilor deopotrivă.Surse consultate: Am folosit ca referință prevederile Ordinului MFP 2634/2015[5] și anexe (modelul oficial de jurnal din Monitorul Oficial[7][9]), Normele Codului Fiscal privind evidența TVA (inclusiv sistemul TVA la încasare) și documentația unor aplicații ERP românești (ex. EMSYS[58]) și soluții cloud (SmartBill Conta[15][12]) pentru a valida configurațiile. De asemenea, am analizat codul existent al aplicației (modulul GeniusERP_V_5_0_1) pentru a corela recomandările cu implementarea actuală[19][33]. Acest plan detaliat reflectă concluziile acestor cercetări și oferă o direcție concretă de dezvoltare.[4][15][1] [2] [3] [4] [5] [6] Jurnal vanzari, jurnalul de vanzari, jurnal pentru vanzari | Facturis.rohttps://facturis.ro/blog/legislatie-facturare-si-stocuri/jurnalul-de-vanzari/[7] [8] [9] [10] [11] jurnale.pdffile://file-6EXQwYN3zhtRuCtYFAHqPW[12] [13] [15] [41] [44] [45] [46] [47] [48] [52] [53] [54] [55] [56] [57] Smart Bill Conta: Jurnalul de vanzarihttps://blog.smartbill.ro/jurnalul-de-vanzari/[14] Ordinului nr.2634/2015 privind documentele financiar-contabile a fost modificat si completat prin Ordinul nr.1447/2023 | contabun.rohttps://www.contabun.ro/2023/09/01/ordinului-nr-26342015-privind-documentele-financiar-contabile-a-fost-modificat-si-completat-prin-ordinul-nr-14472023/?srsltid=AfmBOopXV_lV1O40auCSkAAjgcbXQyIgzQLv3V_7V-U_76vZqMtxk7tk[16] [17] [18] [19] [20] [21] [30] [31] [35] [42] [43] [51] schema.tshttps://github.com/neacisu/GeniusERP_V_5_0_1/blob/8b8d5bddd4268011a1ae6023624fe1f02a5e30f4/shared/schema.ts[22] [23] [24] [25] [37] sales-journal.controller.tshttps://github.com/neacisu/GeniusERP_V_5_0_1/blob/8b8d5bddd4268011a1ae6023624fe1f02a5e30f4/server/modules/accounting/controllers/sales-journal.controller.ts[26] [27] [28] [29] [32] [33] [34] [36] [38] sales-journal.service.tshttps://github.com/neacisu/GeniusERP_V_5_0_1/blob/8b8d5bddd4268011a1ae6023624fe1f02a5e30f4/server/modules/accounting/services/sales-journal.service.ts[39] [40] [58] Jurnal Vanzari Model 2016 — EMSYS ERP Documentationhttps://docs.emsys.ro/erp_trunk/fi/rapoarte/jurnalvanzarimodel.html[49] [50] static.anaf.rohttps://static.anaf.ro/static/10/Anaf/legislatie/OMFP_2634_2015.pdf
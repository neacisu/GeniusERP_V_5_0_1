```markdown
### Step 78: Test Authentication via Username/Password (Non-Email-Based Login)

**🧠 Description:**  
Refactor authentication flow to use **username-based login** (not email). Create several predefined test users for each functional role, then verify the login endpoint returns a valid JWT token. Display a temporary label on the login page listing these credentials for manual testing.

This step ensures the authentication layer works end-to-end and prepares the app for multi-role usage across accounting, sales, inventory, etc.

---

**📎 Dependencies:**  
- Step 19: AuthModule implemented  
- Step 76: UserService completed with Drizzle  
- AdminController (Step 77) available to create users

---

**⚙️ Prompt for Agent:**

"Update GeniusERP v.2 to use **username/password** authentication (instead of email), then run authentication tests.

---

1. 🔧 **Update Auth Logic (Drizzle):**

- Change login input field from `email` ➝ `username`
- Adjust User model in schema (if not already):
```ts
username string @unique
```
- Modify login service to authenticate by `username`

---

2. 👥 **Create Predefined Test Users:**

Use the `AdminController` to create the following roles:

| Username       | Password | Role         |
|----------------|----------|--------------|
| admin          | admin    | Admin        |
| contabil       | contabil | Accountant   |
| vanzari        | vanzari  | Sales        |
| marketing      | marketing| Marketing    |
| gestionar      | gestionar| Inventory    |

Example curl (run once per user):

```bash
curl -X POST http://localhost:3000/admin/users \
-d '{"companyId":"demo-co","username":"admin","password":"admin"}' \
-H "Content-Type: application/json"
```

Repeat for each user/role.

---

3. ✅ **Test Login Endpoint:**

Run:

```bash
curl -X POST http://localhost:3000/auth/login \
-d '{"username":"admin","password":"admin"}' \
-H "Content-Type: application/json"
```

Ensure a JWT token is returned.

---

4. 🪧 **Frontend Login UI Update (Temporary):**

Add a **temporary info box** on the login page (React) displaying available test accounts:

```jsx
<div className="p-4 text-sm bg-yellow-100 text-yellow-800 rounded">
  <p><strong>Test Users:</strong></p>
  <ul className="list-disc pl-4">
    <li><code>admin / admin</code> - Admin</li>
    <li><code>contabil / contabil</code> - Accountant</li>
    <li><code>vanzari / vanzari</code> - Sales</li>
    <li><code>marketing / marketing</code> - Marketing</li>
    <li><code>gestionar / gestionar</code> - Inventory</li>
  </ul>
</div>
```

---

5. 🔐 **Post-Test Actions:**

- Remove temporary label from frontend after QA
- Ensure proper role assignment and AuthGuard enforcement
- Integrate user roles into `req.user.roles` payload for RBAC middleware

---
```
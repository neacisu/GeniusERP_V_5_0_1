```
Step 36: Create or Upgrade SignDocumentService (with PandaDoc Integration)

üéØ Description:  
Implement a `SignDocumentService` that integrates with **PandaDoc** to initiate electronic signing workflows for ERP documents (see Section 2.2.2.2).  
Before generating the service, the agent must first **audit whether the service already exists** to avoid duplication.  
The service will use **Axios** to call PandaDoc's API and track the signing flow per document.

üì¶ Technologies:
- eSignature Provider: PandaDoc (not DocuSign)
- HTTP Client: Axios
- ORM: Drizzle
- Backend: Express (modular NX)
- Secrets: `PANDADOC_API_KEY` via Replit

üß± Dependencies:
- Step 34: Document and DocumentVersion models migrated
- Step 27: Axios installed
- Step 35: PandaDoc API key configured in Replit Secrets

‚öôÔ∏è Instructions:

1. ‚úÖ Check if this file already exists:
```
apps/api/src/modules/documents/services/sign-document.service.ts
```

- If it exists, audit its structure and adapt to use PandaDoc
- If it doesn't, create it

2. ‚úÖ Implement service:
```ts
import axios from 'axios';
import { drizzleClient } from '@/common/drizzle/drizzle.client';
import { documents } from '../schema/document.schema';
import { eq } from 'drizzle-orm';

export class SignDocumentService {
  static async sign(documentId: string, signerEmail: string, signerName: string) {
    const doc = await drizzleClient
      .select()
      .from(documents)
      .where(eq(documents.id, documentId))
      .limit(1);

    if (!doc.length) {
      throw new Error('Document not found');
    }

    const response = await axios.post(
      'https://api.pandadoc.com/public/v1/documents',
      {
        name: `Document-${documentId}`,
        file_url: doc[0].file_path, // assumes external file link
        recipients: [
          {
            email: signerEmail,
            first_name: signerName,
            role: 'signer',
          },
        ],
        parse_form_fields: true,
        send_email: true,
      },
      {
        headers: {
          Authorization: `API-Key ${process.env.PANDADOC_API_KEY}`,
        },
      }
    );

    return response.data;
  }
}
```

3. ‚úÖ Optional: Log result or update document with signature ID

üß™ Validation:
- Call `SignDocumentService.sign(...)` with test inputs
- Verify PandaDoc returns valid document ID
- Signer receives email link

üìé Notes:
- Signing status tracking via webhook/callback will be added in later steps
- All integration should use centralized secrets and logging
- Supports only PandaDoc ‚Äî **never mention DocuSign**
```
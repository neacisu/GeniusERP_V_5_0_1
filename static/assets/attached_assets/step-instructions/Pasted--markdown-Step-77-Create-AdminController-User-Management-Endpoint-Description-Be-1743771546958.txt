```markdown
### Step 77: Create AdminController (User Management Endpoint)

**🧠 Description:**  
Before implementing the AdminController, the agent must **audit the existing `AuthModule` and `AuthGuard`** to ensure that:

- JWT validation is active and reliable
- Role-based access control is enforced (e.g., only admin-level users can create users)
- The user object (`req.user`) includes required identifiers (`companyId`, `userId`, `roles`)

Once verified, implement the `AdminController` for user administration across all modules. This controller is foundational for administrative functions like:

- User creation
- Future: Role/permission assignment
- Future: Deactivation/reactivation workflows
- Future: Company/franchise management

---

**📎 Dependencies:**  
Step 76 (UserService implemented), Step 20 (AuthGuard audited and active), Drizzle-based Auth system in place

---

**⚙️ Prompt for Agent:**

"1. 🔍 First, **audit the current AuthModule and AuthGuard implementation**:

- Ensure `AuthGuard` properly reads JWT and injects `req.user`
- Confirm `req.user` includes: `userId`, `companyId`, `roles`
- Validate role-checking logic exists or scaffold it if missing
- Verify route protection middleware is correctly applied

---

2. 📦 Then, **implement the AdminController for GeniusERP v.2 using Drizzle**:

📁 File: `server/modules/admin/admin.controller.ts`

```ts
import { Controller, Post, Body, UseGuards } from '@nestjs/common';
import { UserService } from './services/user.service';
import { AuthGuard } from '@/server/common/guards/auth.guard';

@UseGuards(AuthGuard)
@Controller('/admin')
export class AdminController {
  constructor(private readonly userService: UserService) {}

  @Post('/users')
  async createUser(
    @Body()
    body: {
      email: string;
      password: string;
      companyId: string;
      franchiseId?: string;
    }
  ) {
    return this.userService.createUser(body.companyId, body.email, body.password);
  }
}
```

---

3. 🧩 Register the controller in module:  
Edit `server/modules/admin/admin.module.ts`:

```ts
import { AdminController } from './admin.controller';
import { UserService } from './services/user.service';

@Module({
  imports: [DrizzleModule],
  controllers: [AdminController],
  providers: [UserService],
})
export class AdminModule {}
```

---

4. ✅ Test:

- Hit `POST /admin/users` with a valid JWT token
- Ensure role-check passes
- Confirm new user is added to the `users` table
- Validate response format

---

🔐 **Security Reminder:** This route must be protected by role check logic to ensure only super admins or system-level roles can create users.

Future enhancement: Add `@Roles('admin')` decorator once RBAC middleware is completed.
```
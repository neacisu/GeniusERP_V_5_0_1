```
Step 30: Create Invoices Module (Granular + Express + Drizzle)

🎯 Description:  
Create a fully modular and granular `invoices` module to encapsulate all logic related to invoice management.  
This module must follow the **NX monorepo** and **feature-by-folder** structure, and import dependencies such as the **ExchangeRateService** from the `currency` module.  
It will serve as the foundation for draft/issue/send/cancel logic and e-Factura integration (see Section 4.1.4.2).

📦 Technologies:
- Backend: Express
- ORM: Drizzle
- Monorepo: NX (`apps/api/src/modules/invoices`)
- Architecture: Ultra-granular

🧱 Dependencies:
- Step 26: `invoices` table migrated
- Step 29: `ExchangeRateService` ready in currency module

⚙️ Instructions:

1. ✅ Create the following folder structure:
```
apps/api/src/modules/invoices/
├── controllers/
│   └── create-invoice.controller.ts
├── routes/
│   └── create-invoice.route.ts
├── services/
│   └── invoice.service.ts
├── schema/
│   └── invoice.schema.ts     ✅ already exists
├── validators/
│   └── create-invoice.validator.ts
├── types/
│   └── invoice-status.enum.ts
│   └── invoice.input.ts
├── invoices.module.ts        ✅ main module entrypoint
```

2. ✅ Create `invoices.module.ts`:
```ts
// apps/api/src/modules/invoices/invoices.module.ts
import { ExchangeRateService } from '@/modules/currency/services/exchange-rate.service';
import { InvoiceService } from './services/invoice.service';

export class InvoicesModule {
  static register() {
    return {
      services: [InvoiceService, ExchangeRateService],
    };
  }
}
```

3. ✅ Register it manually in `apps/api/src/app.ts` or main file:
```ts
import { InvoicesModule } from '@/modules/invoices/invoices.module';

const { services } = InvoicesModule.register();
const [invoiceService] = services;
```

🧪 Validation:
- Run `npm run build` — no missing services or modules
- Folder structure matches domain-driven, granular layout
- Files < 150 LOC each and independently testable

📎 Notes:
- All invoice lifecycle logic (Draft → Issued → Sent → Canceled) goes in `invoice.service.ts`
- Break all major logic (e.g. issue, delete, allocate number) into separate services/controllers/routes
- This sets up the foundation for e-Factura, series control, and currency logic
```
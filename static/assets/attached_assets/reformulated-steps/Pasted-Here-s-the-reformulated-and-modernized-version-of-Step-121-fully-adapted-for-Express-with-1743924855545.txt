Here’s the **reformulated and modernized version** of **Step 121**, fully adapted for **Express with Drizzle**, secured using the standard GeniusERP authentication stack, and aligned with project conventions (`/api/` base path, service injection, module structure):

---

```markdown
### 👨‍💼 Step 121: Create or Upgrade EmployeeService (Express + Drizzle)

📌 **Purpose**  
Implement an `EmployeeService` inside the `HR` module to support employee creation and persistence using Drizzle ORM. This lays the foundation for managing HR data like personnel, contracts, payroll, and reporting.

---

### 🧠 Agent Instructions

#### 1. 🔍 Pre-check: Search for Existing Implementation

Check for existing service at:
- `src/modules/hr/employee.service.ts`

If found:
- ✅ Do **not** create a new file.
- 🔄 Instead, **extend or upgrade** it to include a `createEmployee()` method using Drizzle.

If not found:
- ✅ Proceed to creation.

---

#### 2. ✅ Create or Extend: `employee.service.ts`

Create or update file:
`src/modules/hr/employee.service.ts`

```ts
import { Injectable } from "express-decorators";
import { db } from "../../db/client"; // Drizzle client
import { employees } from "../../db/schema"; // Drizzle schema
import { eq } from "drizzle-orm";

@Injectable()
export class EmployeeService {
  async createEmployee(
    companyId: string,
    franchiseId: string,
    name: string,
    email: string,
    position: string,
    salary: number,
    hireDate: string
  ) {
    const result = await db.insert(employees).values({
      company_id: companyId,
      franchise_id: franchiseId,
      name,
      email,
      position,
      salary,
      hire_date: new Date(hireDate),
    });

    return result;
  }
}
```

---

#### 3. 🔗 Register Service in HR Module

Edit: `src/modules/hr/hr.module.ts`

```ts
import { EmployeeService } from "./employee.service";

export const HrModule = {
  providers: [EmployeeService],
  exports: [EmployeeService],
};
```

---

### 🔐 Authentication Strategy

Ensure this service is **only called from endpoints secured with**:
- `AuthGuard.protect(JwtAuthMode.REQUIRED)`
- `AuthGuard.roleGuard(['hr_team'])`
- `AuthGuard.companyGuard()`

---

### ✅ Outcome

> A reusable, type-safe, and secure `EmployeeService` is now available for the HR module. It supports employee creation with Drizzle and integrates smoothly with existing controllers and middleware.

Let me know if you'd like to proceed with:
- `POST /api/hr/employee` controller scaffold
- Adding validation via Zod schema
- Implementing employee update and search
```
Here is a **reformulated and enhanced version of Step 106**, tailored for **Express with Drizzle**, using the `/api/` base path and enforcing proper authentication with `AuthGuard.protect(JwtAuthMode.REQUIRED)`, `AuthGuard.roleGuard()`, and `AuthGuard.companyGuard()`.

It also includes clear instruction for the Replit Agent to **audit for existing implementation** before adding or modifying logic.

---

```markdown
### üõ†Ô∏è Step 106: Enhance CheckStockLevelsService with Notifications (Express + Drizzle)

**üìå Description:**  
Upgrade the existing `CheckStockLevelsService` to send notifications (e.g., email, log, dashboard) whenever stock levels fall below a defined threshold. This ensures real-time alerting, improves inventory visibility, and tightens integration between monitoring and notification flows.

---

### üß† Agent Instructions

#### 1. üîç Check for Existing Service
Before implementing, **search for existing CheckStockLevelsService** in:

- `src/modules/inventory/services/check-stock-levels.service.ts`
- Or similar inventory monitoring logic

‚úÖ If the service exists:
- **Do not duplicate**
- Refactor to inject `NotificationService` and add the alert logic below

üö´ If not found:
- Proceed to create it and integrate notification logic accordingly.

---

#### 2. üîç Check for Existing NotificationService

Ensure `NotificationService` is available globally:
- Location: `src/common/services/notification.service.ts`
- Method: `sendNotification(to: string, message: string): Promise<any>`

---

#### 3. ‚úçÔ∏è Enhance or Implement the Service

**File:**  
`src/modules/inventory/services/check-stock-levels.service.ts`

```ts
import { Injectable } from "express-utils"; // or from a local decorator
import { drizzle } from "../../../db"; // use correct drizzle client import
import { NotificationService } from "../../../common/services/notification.service";
import { Queue } from "bullmq";

@Injectable()
export class CheckStockLevelsService {
  constructor(
    private notification: NotificationService,
    private stockQueue: Queue // assume already injected via serviceRegistry
  ) {}

  async checkLowStocks(franchiseId: string) {
    const db = drizzle();
    const lowStocks = await db.query.stock.findMany({
      where: (stock, { and, lt, eq }) =>
        and(eq(stock.franchise_id, franchiseId), lt(stock.quantity, stock.min_quantity ?? 10))
    });

    for (const stock of lowStocks) {
      await this.stockQueue.add("low-stock-alert", {
        sku: stock.sku,
        warehouseId: stock.warehouse_id,
        quantity: stock.quantity,
      });

      await this.notification.sendNotification(
        "inventory_team@example.com",
        `üì¶ Low Stock Alert: SKU ${stock.sku} in warehouse ${stock.warehouse_id} has only ${stock.quantity} units left.`
      );
    }

    return { lowStocks, count: lowStocks.length };
  }
}
```

---

#### 4. ‚úÖ Register in Module (if not already)

**File:**  
`src/modules/inventory/index.ts` or `inventory.module.ts`

Make sure `NotificationService` is included in your service container or manually passed via your Express DI pattern.

---

### ‚úÖ Result:
> The Inventory module now automatically notifies relevant teams when stock falls below the minimum threshold. This integrates BullMQ job queuing with real-time alerting, laying the foundation for deeper automation like auto-reordering, dashboard triggers, and procurement workflows.

Would you also like to:
- Route alerts into the dashboard via in-app notifications?
- Send Slack or WhatsApp messages instead of email?
- Track resolved vs unresolved alerts?

Let me know and I can scaffold that next.
```
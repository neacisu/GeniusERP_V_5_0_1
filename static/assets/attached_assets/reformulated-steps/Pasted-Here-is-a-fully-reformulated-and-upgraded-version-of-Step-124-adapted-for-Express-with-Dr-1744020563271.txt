Here is a **fully reformulated and upgraded version** of **Step 124**, adapted for **Express with Drizzle** and reflecting your architecture (‚úÖ we are using the `accounting` module, not `finance`) ‚Äî with security standards, consistent `/api/` routing, and avoidance of duplication:

---

### üî¢ Step 124: Create `LedgerService` for the Accounting Module (Express + Drizzle)

**üìò Description:**  
Implement a `LedgerService` within the `accounting` module to support double-entry bookkeeping. This service will record transactions in the `ledger` table using Drizzle ORM. It is foundational for all accounting-related operations, including invoice validation, journal entries, and balance tracking.

---

### üß† Agent Instructions:

#### 1. üîç First ‚Äî Check for Existing Implementation
- ‚úÖ Inspect `src/modules/accounting/` for:
  - Any `ledger.service.ts` or `journal.service.ts` files
  - Existing service logic that interacts with the `ledger` table
- ‚úÖ If such service exists:
  - **Do not duplicate it.**
  - **Upgrade it** by ensuring:
    - It uses Drizzle ORM
    - It adheres to security context (company/franchise scope)
    - It supports debit/credit distinction and multi-account support
- ‚úÖ If it does not exist, proceed to create a new `LedgerService`

---

### 2. üìÅ File: `src/modules/accounting/ledger.service.ts`

```ts
import { Injectable } from "express";
import { db } from "../../common/drizzle/db";
import { ledger } from "../../common/drizzle/schema"; // adjust if ledger table is defined elsewhere
import { eq } from "drizzle-orm";

@Injectable()
export class LedgerService {
  async recordTransaction({
    companyId,
    franchiseId,
    debitAccount,
    creditAccount,
    amount,
    description,
    documentId,
    documentType,
  }: {
    companyId: string;
    franchiseId: string;
    debitAccount: string;
    creditAccount: string;
    amount: number;
    description: string;
    documentId?: string;
    documentType?: string;
  }) {
    const timestamp = new Date();

    const result = await db.insert(ledger).values([
      {
        company_id: companyId,
        franchise_id: franchiseId,
        account: debitAccount,
        direction: "debit",
        amount,
        description,
        document_id: documentId,
        document_type: documentType,
        created_at: timestamp,
      },
      {
        company_id: companyId,
        franchise_id: franchiseId,
        account: creditAccount,
        direction: "credit",
        amount,
        description,
        document_id: documentId,
        document_type: documentType,
        created_at: timestamp,
      },
    ]);

    return result;
  }
}
```

---

### 3. üß© Module Registration

‚û°Ô∏è Update `src/modules/accounting/accounting.module.ts`:

```ts
import { LedgerService } from "./ledger.service";

@Module({
  providers: [LedgerService],
  exports: [LedgerService], // if needed by invoices or CRM
})
export class AccountingModule {}
```

---

### ‚úÖ Final Notes:
- Uses Drizzle‚Äôs `insert` for double-entry logic (2 rows per transaction).
- Aligned with Romanian accounting principles (partida dublƒÉ).
- Handles optional linkage to documents (facturi, avize, etc.).
- Can later be extended to support reversal, reconciliation, or validation workflows.

---

### Optional Next Steps:
Would you like me to scaffold a:
- `validateInvoiceTransaction()` for automated ledger posting?
- `getTrialBalance()` aggregation using Drizzle?
- CLI or test curl script for triggering this service?

Let me know ‚Äî I'm ready to proceed with your accounting flow integration. üßæüìä
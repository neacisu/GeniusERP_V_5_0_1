import React, { ReactNode } from "react";
import AppLayout from "@/components/layout/AppLayout";
import { Link, useLocation } from "wouter";
import { cn } from "@/lib/utils";
import {
  Building2,
  FileText,
  PlugZap,
  Server,
  Settings,
  Shield,
  UserCircle,
  UserCog,
  ChevronDown,
  ChevronRight
} from "lucide-react";

interface SettingsPageWrapperProps {
  children: ReactNode;
}

const navItems = [
  {
    title: "General",
    href: "/settings",
    icon: Settings,
    exact: true
  },
  {
    title: "Date Companie",
    href: "/settings/company",
    icon: Building2
  },
  {
    title: "Utilizatori",
    icon: UserCircle,
    href: "/settings/security/users"
  },
  {
    title: "Sistem",
    icon: Server,
    items: [
      {
        title: "Setări Generale",
        href: "/settings/system/general"
      },
      {
        title: "Module Sistem",
        href: "/settings/system/module-settings"
      },
      {
        title: "Funcționalități",
        href: "/settings/features/feature-toggles"
      }
    ]
  },
  {
    title: "Securitate",
    icon: Shield,
    items: [
      {
        title: "Setări Securitate",
        href: "/settings/security/settings"
      },
      {
        title: "Roluri și Permisiuni",
        href: "/settings/security/roles"
      },
      {
        title: "Chei API",
        href: "/settings/security/api-keys"
      }
    ]
  },
  {
    title: "Preferințe",
    icon: UserCog,
    items: [
      {
        title: "Preferințe Utilizator",
        href: "/settings/preferences/user-preferences"
      },
      {
        title: "Notificări",
        href: "/settings/notifications"
      },
      {
        title: "Tema Interfață",
        href: "/settings/preferences/ui-themes"
      }
    ]
  },
  {
    title: "Șabloane",
    icon: FileText,
    items: [
      {
        title: "Șabloane Documente",
        href: "/settings/templates/document-templates"
      },
      {
        title: "Șabloane Email", 
        href: "/settings/templates/email-templates"
      }
    ]
  },
  {
    title: "Integrări",
    href: "/settings/integrations",
    icon: PlugZap
  }
];

export default function SettingsPageWrapper({ children }: SettingsPageWrapperProps) {
  const [location] = useLocation();
  const [expanded, setExpanded] = React.useState<Record<string, boolean>>({});

  const toggleExpand = (title: string) => {
    setExpanded({
      ...expanded,
      [title]: !expanded[title]
    });
  };

  const renderNavItem = (item: any, index: number) => {
    const isActive = item.exact 
      ? location === item.href 
      : item.href && location.startsWith(item.href);
    
    const isExpanded = expanded[item.title] || 
      (item.items && item.items.some(
        (subItem: any) => subItem.href && location.startsWith(subItem.href)
      ));
    
    const Icon = item.icon;

    // If the item has subitems, render an expandable section
    if (item.items) {
      return (
        <li key={index} className="mb-1">
          <button
            onClick={() => toggleExpand(item.title)}
            className={cn(
              "flex items-center w-full p-2 rounded-md text-left",
              isActive 
                ? "bg-primary/15 text-primary" 
                : "hover:bg-muted"
            )}
          >
            {Icon && <Icon className="h-4 w-4 mr-2" />}
            <span className="flex-1">{item.title}</span>
            {isExpanded ? (
              <ChevronDown className="h-4 w-4" />
            ) : (
              <ChevronRight className="h-4 w-4" />
            )}
          </button>

          {/* Submenu */}
          {isExpanded && (
            <ul className="pl-6 mt-1 space-y-1">
              {item.items.map((subItem: any, subIndex: number) => {
                const isSubActive = subItem.href && location.startsWith(subItem.href);
                return (
                  <li key={`${index}-${subIndex}`}>
                    <Link href={subItem.href}>
                      <a
                        className={cn(
                          "block p-2 rounded-md",
                          isSubActive 
                            ? "bg-primary/10 text-primary" 
                            : "hover:bg-muted"
                        )}
                      >
                        {subItem.title}
                      </a>
                    </Link>
                  </li>
                );
              })}
            </ul>
          )}
        </li>
      );
    }
    
    // Otherwise, render a simple nav link
    return (
      <li key={index}>
        <Link href={item.href}>
          <a
            className={cn(
              "flex items-center p-2 rounded-md",
              isActive 
                ? "bg-primary/15 text-primary" 
                : "hover:bg-muted"
            )}
          >
            {Icon && <Icon className="h-4 w-4 mr-2" />}
            <span>{item.title}</span>
          </a>
        </Link>
      </li>
    );
  };

  return (
    <AppLayout>
      <div className="container mx-auto p-4">
        <div className="flex flex-col md:flex-row gap-6">
          {/* Left sidebar navigation */}
          <aside className="w-full md:w-64 shrink-0">
            <div className="border rounded-lg overflow-hidden">
              <div className="bg-primary p-4">
                <h2 className="text-lg font-semibold text-primary-foreground">Setări</h2>
              </div>
              <nav className="p-2">
                <ul className="space-y-1">
                  {navItems.map(renderNavItem)}
                </ul>
              </nav>
            </div>
          </aside>

          {/* Main content area */}
          <div className="flex-1">
            {children}
          </div>
        </div>
      </div>
    </AppLayout>
  );
}
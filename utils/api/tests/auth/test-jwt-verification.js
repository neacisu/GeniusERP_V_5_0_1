/**
 * JWT Test Token Verification
 * 
 * Verifies a JWT token to ensure it's valid with our Auth service
 */

import { JwtService } from './server/modules/auth/services/jwt.service.js';

// Use JwtService which will use the environment's secret
const jwtService = new JwtService();

// Token to verify - generated by test-jwt-refresh.js with the current environment's secret
const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImUzZDhlNDgxLWJmYjQtNGYzYi1iYzk5LTcxNDNmYTY3MzE3MiIsInVzZXJuYW1lIjoiYWRtaW4iLCJyb2xlIjoiYWRtaW4iLCJyb2xlcyI6WyJhZG1pbiJdLCJjb21wYW55SWQiOiI3MTk2Mjg4ZC03MzE0LTQ1MTItOGI2Ny0yYzgyNDQ5YjU0NjUiLCJpYXQiOjE3NDM1NzI1ODAsImV4cCI6MTc0MzU3NjE4MH0.f8pKyySZLNTjYUyeeSQzqhgc717NDzvNZ8j5ZERU510';

try {
  // Verify the token
  const decoded = jwtService.verifyToken(token);
  
  console.log('‚úÖ Token verification successful!');
  console.log('üìù Decoded payload:');
  console.log(decoded);
  
  // Test in HTTP Authorization header format
  console.log('\nüìã For HTTP Authorization header, use:');
  console.log(`Authorization: Bearer ${token}`);
} catch (error) {
  console.error('‚ùå Token verification failed:', error.message);
}
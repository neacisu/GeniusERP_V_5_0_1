FROM node:24.9.0-alpine as builder

WORKDIR /app

# Instalăm dependențele pentru build + PDFKit requirements
# cairo, pango pentru font rendering în PDF
RUN apk add --no-cache python3 make g++ git postgresql-client redis \
    cairo cairo-dev pango pango-dev pixman pixman-dev \
    jpeg-dev giflib-dev librsvg-dev

# Instalăm pnpm
RUN npm install -g pnpm@latest

# Copiem fișierele de dependințe
COPY package.json pnpm-lock.yaml .npmrc pnpm-workspace.yaml ./

# Instalăm dependențele
RUN pnpm install --frozen-lockfile

# Copiem tot codul sursă, inclusiv configurările și credențialele
COPY . .

# Construim aplicația pentru producție cu NX
RUN pnpm run build

# Imaginea finală pentru producție
FROM node:24.9.0-alpine

WORKDIR /app

# Instalăm utilitare pentru verificarea serviciilor și pachete esențiale
# Adăugăm și runtime dependencies pentru PDFKit + cron pentru monitorizare
RUN apk add --no-cache postgresql-client redis curl busybox-extras \
    cairo pango pixman jpeg giflib librsvg python3 py3-pip dcron

# Instalăm pnpm
RUN npm install -g pnpm@latest

# Instalăm doar dependențele de producție
COPY package.json pnpm-lock.yaml .npmrc pnpm-workspace.yaml ./
RUN pnpm install --prod --frozen-lockfile

# Copiem artefactele de build din etapa anterioară (NX structure)
COPY --from=builder /app/dist ./dist

# Copiem libs compilate (dependencies pentru runtime)
COPY --from=builder /app/dist/libs ./dist/libs

# Copiem scripturile de monitorizare cod
COPY --from=builder /app/scripts ./scripts

# Copiem TOATE fișierele de configurare
COPY --from=builder /app/.env* ./
COPY --from=builder /app/docker-entrypoint.sh /usr/local/bin/

# Asigurăm că scriptul de intrare este executabil
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Setăm variabilele de mediu pentru producție
ENV NODE_ENV=production

# Expunem portul aplicației
EXPOSE 5000

# Folosim entrypoint-ul pentru a aștepta serviciile dependente
ENTRYPOINT ["docker-entrypoint.sh"]

# Comanda de start pentru producție (NX structure)
CMD ["node", "dist/apps/api/main.js"]
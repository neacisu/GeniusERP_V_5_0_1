services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: geniuserp-app
    volumes:
      - .:/app
      - ./apps:/app/apps
      - ./libs:/app/libs
      - node_modules_volume:/app/node_modules
    ports:
      - "${APP_PORT_FRONTEND}:${APP_PORT_FRONTEND}" # Frontend Vite
      - "${APP_PORT_BACKEND}:${APP_PORT_BACKEND}" # API Backend
    labels:
      - logging=promtail
      - logging_jobname=geniuserp-app
    environment:
      # Variabile de bază
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      
      # Redis Cloud (citite din .env)
      - REDIS_URL=${REDIS_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USERNAME=${REDIS_USERNAME:-default}
      
      - RUN_MIGRATIONS=${RUN_MIGRATIONS:-false}
      
      # Secrets pentru securitate (citite din .env)
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      
      # ANAF API
      - ANAF_API_URL=${ANAF_API_URL}
      - ANAF_API_VERSION=${ANAF_API_VERSION:-v7}
      
      # Date pentru email
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
      
      # Setări pentru logging
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - ENABLE_SQL_LOGGING=${ENABLE_SQL_LOGGING:-true}
      
      # OpenAI
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_ORGANIZATION=${OPENAI_ORGANIZATION}
      - OPENAI_DEFAULT_MODEL=${OPENAI_DEFAULT_MODEL:-gpt-4}
      
      # Sentry Error Tracking
      - SENTRY_DSN=${SENTRY_DSN}
      - VITE_SENTRY_DSN=${VITE_SENTRY_DSN}
      
      # Setări pentru debugare și HMR
      - VITE_DEV_SERVER_URL=${VITE_DEV_SERVER_URL}
      
      # Setări Vite HMR pentru Hot Reload în Docker
      - VITE_HMR_PROTOCOL=${VITE_HMR_PROTOCOL}
      - VITE_HMR_HOST=${VITE_HMR_HOST}
      - VITE_HMR_PORT=${VITE_HMR_PORT}
      - VITE_HMR_CLIENT_PORT=${VITE_HMR_CLIENT_PORT}
      
      # Vite Allowed Hosts (citit din .env)
      - VITE_ALLOWED_HOSTS=${VITE_ALLOWED_HOSTS}
      
      # Enable watch polling pentru Docker volumes (important pentru HMR)
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
      - CHOKIDAR_INTERVAL=${CHOKIDAR_INTERVAL}
    depends_on:
      - postgres
    restart: ${CONTAINER_RESTART_POLICY}
    networks:
      - geniuserp-network

  postgres:
    image: postgres:17-alpine
    container_name: geniuserp-postgres
    volumes:
      - postgres_data:${POSTGRES_DATA_PATH}
    ports:
      - "${POSTGRES_PORT_EXTERNAL}:${POSTGRES_PORT_INTERNAL}"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    labels:
      - logging=promtail
      - logging_jobname=postgres
    restart: ${CONTAINER_RESTART_POLICY}
    networks:
      - geniuserp-network
    command: postgres -c 'max_connections=${POSTGRES_MAX_CONNECTIONS}' -c 'shared_buffers=${POSTGRES_SHARED_BUFFERS}'

  # Adminer pentru administrarea bazei de date (opțional)
  adminer:
    image: adminer
    container_name: geniuserp-adminer
    restart: ${CONTAINER_RESTART_POLICY}
    ports:
      - "${ADMINER_PORT}:${ADMINER_PORT}"
    labels:
      - logging=promtail
      - logging_jobname=adminer
    depends_on:
      - postgres
    networks:
      - geniuserp-network

  # ===== MONITORING STACK =====
  
  # Prometheus - Colectare metrici
  prometheus:
    image: prom/prometheus:latest
    container_name: geniuserp-prometheus
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:${PROMETHEUS_CONFIG_FILE}
      - prometheus_data:${PROMETHEUS_STORAGE_PATH}
    command:
      - '--config.file=${PROMETHEUS_CONFIG_FILE}'
      - '--storage.tsdb.path=${PROMETHEUS_STORAGE_PATH}'
      - '--web.console.libraries=${PROMETHEUS_CONSOLE_LIBRARIES}'
      - '--web.console.templates=${PROMETHEUS_CONSOLE_TEMPLATES}'
    labels:
      - logging=promtail
      - logging_jobname=prometheus
    networks:
      - geniuserp-network
    restart: unless-stopped

  # Grafana - Dashboards și Alerte
  grafana:
    image: grafana/grafana:latest
    container_name: geniuserp-grafana
    ports:
      - "${GRAFANA_PORT_EXTERNAL}:${GRAFANA_PORT_INTERNAL}"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:${GRAFANA_DATA_PATH}
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
      - GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL}
      - GF_INSTALL_PLUGINS=${GF_INSTALL_PLUGINS}
      # Sentry Integration
      - SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN}
    labels:
      - logging=promtail
      - logging_jobname=grafana
    networks:
      - geniuserp-network
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped

  # Loki - Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: geniuserp-loki
    user: "0:0"
    ports:
      - "${LOKI_PORT}:${LOKI_PORT}"
    volumes:
      - ./monitoring/loki/loki-config.yml:${LOKI_CONFIG_FILE}
      - loki_data:${LOKI_DATA_PATH}
    command: -config.file=${LOKI_CONFIG_FILE}
    labels:
      - logging=promtail
      - logging_jobname=loki
    networks:
      - geniuserp-network
    restart: unless-stopped

  # Promtail - Log collector
  promtail:
    image: grafana/promtail:latest
    container_name: geniuserp-promtail
    volumes:
      - ./monitoring/promtail/promtail-config.yml:${PROMTAIL_CONFIG_FILE}
      - ${DOCKER_SOCK_PATH}:${DOCKER_SOCK_PATH}:ro
      - ${DOCKER_CONTAINERS_PATH}:${DOCKER_CONTAINERS_PATH}:ro
    command: -config.file=${PROMTAIL_CONFIG_FILE}
    networks:
      - geniuserp-network
    depends_on:
      - loki
    restart: unless-stopped

  # ===== SECURITY STACK =====

  # Falco - Runtime Security Monitoring
  falco:
    image: falcosecurity/falco-no-driver:latest
    container_name: geniuserp-falco
    privileged: true
    pid: host
    volumes:
      - ${DOCKER_SOCK_PATH}:/host${DOCKER_SOCK_PATH}:ro
      - ${HOST_PROC_PATH}:/host${HOST_PROC_PATH}:ro
      - ${HOST_ETC_PATH}:/host${HOST_ETC_PATH}:ro
      - ./monitoring/falco:/etc/falco
    environment:
      - FALCO_BPF_PROBE=${FALCO_BPF_PROBE}
    labels:
      - logging=promtail
      - logging_jobname=falco
    networks:
      - geniuserp-network
    restart: unless-stopped

  # Wazuh Indexer (OpenSearch) - CON SSL ACTIVAT
  # DEZACTIVAT PE MAC - va fi activat pe VPS la deploy
  # Pentru a porni manual: docker-compose --profile wazuh up -d
  wazuh-indexer:
    image: wazuh/wazuh-indexer:4.7.0
    container_name: geniuserp-wazuh-indexer
    hostname: wazuh-indexer
    profiles:
      - wazuh  # Pornește doar cu: docker-compose --profile wazuh up -d
    ports:
      - "${WAZUH_INDEXER_PORT}:${WAZUH_INDEXER_PORT}"
    environment:
      - "OPENSEARCH_JAVA_OPTS=${OPENSEARCH_JAVA_OPTS}"
      - "bootstrap.memory_lock=${OPENSEARCH_BOOTSTRAP_MEMORY_LOCK}"
      - "discovery.type=${OPENSEARCH_DISCOVERY_TYPE}"
      - "network.host=${OPENSEARCH_NETWORK_HOST}"
      # SSL ACTIVAT - certificate demo pentru development (schimbă în producție)
      - "plugins.security.ssl.http.enabled=${OPENSEARCH_SSL_HTTP_ENABLED}"
      - "plugins.security.ssl.transport.enabled=${OPENSEARCH_SSL_TRANSPORT_ENABLED}"
      - "plugins.security.disabled=${OPENSEARCH_SECURITY_DISABLED}"
      - "DISABLE_INSTALL_DEMO_CONFIG=${DISABLE_INSTALL_DEMO_CONFIG}"
    ulimits:
      memlock:
        soft: ${ULIMIT_MEMLOCK_SOFT}
        hard: ${ULIMIT_MEMLOCK_HARD}
      nofile:
        soft: ${ULIMIT_NOFILE_SOFT}
        hard: ${ULIMIT_NOFILE_HARD}
    volumes:
      - wazuh_indexer_data:${WAZUH_INDEXER_DATA_PATH}
      - ./monitoring/wazuh/certs/wazuh-certificates:/usr/share/wazuh-indexer/certs/
    networks:
      - geniuserp-network
    restart: unless-stopped

  # Wazuh Manager - CON SSL
  # DEZACTIVAT PE MAC - va fi activat pe VPS la deploy
  wazuh-manager:
    image: wazuh/wazuh-manager:4.7.0
    container_name: geniuserp-wazuh-manager
    hostname: wazuh-manager
    profiles:
      - wazuh  # Pornește doar cu: docker-compose --profile wazuh up -d
    ports:
      - "${WAZUH_MANAGER_PORT_1514}:${WAZUH_MANAGER_PORT_1514}"
      - "${WAZUH_MANAGER_PORT_1515}:${WAZUH_MANAGER_PORT_1515}"
      - "${WAZUH_MANAGER_API_PORT}:${WAZUH_MANAGER_API_PORT}"
    environment:
      # SSL ACTIVAT - folosește HTTPS
      - INDEXER_URL=${WAZUH_INDEXER_URL}
      - INDEXER_USERNAME=${WAZUH_INDEXER_USERNAME}
      - INDEXER_PASSWORD=${WAZUH_INDEXER_PASSWORD}
      - FILEBEAT_SSL_VERIFICATION_MODE=${FILEBEAT_SSL_VERIFICATION_MODE}
      # Certificate SSL pentru conexiune securizată
      - SSL_CERTIFICATE_AUTHORITIES=${WAZUH_SSL_CERTIFICATE_AUTHORITIES}
      - API_USERNAME=${WAZUH_API_USERNAME}
      - API_PASSWORD=${WAZUH_API_PASSWORD}
    volumes:
      - wazuh_manager_data:${WAZUH_MANAGER_DATA_PATH}
      - wazuh_manager_etc:${WAZUH_MANAGER_ETC_PATH}
      - wazuh_manager_logs:${WAZUH_MANAGER_LOGS_PATH}
      - ./monitoring/wazuh/certs/wazuh-certificates:/etc/ssl:ro
    labels:
      - logging=promtail
      - logging_jobname=wazuh-manager
    networks:
      - geniuserp-network
    depends_on:
      - wazuh-indexer
    restart: unless-stopped

  # Wazuh Dashboard - CON SSL
  # DEZACTIVAT PE MAC - va fi activat pe VPS la deploy
  wazuh-dashboard:
    image: wazuh/wazuh-dashboard:4.7.0
    container_name: geniuserp-wazuh-dashboard
    hostname: wazuh-dashboard
    profiles:
      - wazuh  # Pornește doar cu: docker-compose --profile wazuh up -d
    ports:
      - "${WAZUH_DASHBOARD_PORT_EXTERNAL}:${WAZUH_DASHBOARD_PORT_INTERNAL}"
    environment:
      # Credențiale default Wazuh (schimbă în producție)
      - INDEXER_USERNAME=${WAZUH_INDEXER_USERNAME}
      - INDEXER_PASSWORD=${WAZUH_INDEXER_PASSWORD}
      # HTTPS activat pentru toate conexiunile
      - WAZUH_API_URL=${WAZUH_API_URL}
      - DASHBOARD_USERNAME=${WAZUH_DASHBOARD_USERNAME}
      - DASHBOARD_PASSWORD=${WAZUH_DASHBOARD_PASSWORD}
      - API_USERNAME=${WAZUH_API_USERNAME}
      - API_PASSWORD=${WAZUH_API_PASSWORD}
      # SSL/HTTPS pentru indexer
      - OPENSEARCH_HOSTS=${OPENSEARCH_HOSTS}
      - OPENSEARCH_SSL_VERIFICATIONMODE=${OPENSEARCH_SSL_VERIFICATIONMODE}
    volumes:
      - ./monitoring/wazuh/certs/wazuh-certificates:/usr/share/wazuh-dashboard/certs:ro
    networks:
      - geniuserp-network
    depends_on:
      - wazuh-manager
    restart: unless-stopped

  # Trivy Scanner (optional - runs on demand)
  trivy-scanner:
    image: aquasec/trivy:latest
    container_name: geniuserp-trivy
    volumes:
      - ${DOCKER_SOCK_PATH}:${DOCKER_SOCK_PATH}:ro
      - .:/app:ro
      - trivy_cache:${TRIVY_CACHE_PATH}
    command: ["--help"]
    networks:
      - geniuserp-network
    profiles:
      - tools
    restart: "no"

networks:
  geniuserp-network:
    driver: ${DOCKER_NETWORK_DRIVER}

volumes:
  postgres_data:
    external: true
    name: geniuserp_postgres_data
  node_modules_volume:
  prometheus_data:
  grafana_data:
  loki_data:
  wazuh_indexer_data:
  wazuh_manager_data:
  wazuh_manager_etc:
  wazuh_manager_logs:
  trivy_cache:
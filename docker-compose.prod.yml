services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: geniuserp-app
    restart: unless-stopped
    labels:
      - logging=promtail
      - logging_jobname=geniuserp-app
    environment:
      # Variabile de bază
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/geniuserp
      - RUN_MIGRATIONS=true
      
      # Redis Cloud - securizat cu credentialele din Replit Secrets
      - REDIS_URL=${REDIS_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USERNAME=${REDIS_USERNAME}
      
      # Secrets pentru securitate
      - JWT_SECRET=${JWT_SECRET:-jwt_secret_key_for_prod_environment}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-jwt_refresh_secret_key_for_prod_environment}
      - SESSION_SECRET=${SESSION_SECRET:-prod_session_secret_key}
      
      # ANAF API
      - ANAF_API_URL=https://webservicesp.anaf.ro/PlatitorTvaRest/api/v7/ws/tva
      - ANAF_API_VERSION=v7
      
      # Date pentru email
      - SMTP_HOST=${SMTP_HOST:-smtp.example.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-noreply@example.com}
      - SMTP_PASS=${SMTP_PASS:-smtp_password_here}
      - EMAIL_FROM=${EMAIL_FROM:-noreply@example.com}
      
      # Setări pentru logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_SQL_LOGGING=${ENABLE_SQL_LOGGING:-false}
      
      # Sentry Error Tracking
      - SENTRY_DSN=${SENTRY_DSN}
      - VITE_SENTRY_DSN=${VITE_SENTRY_DSN}
    volumes:
      - app_logs:/app/logs
      - db_backups:/app/db-backups
    depends_on:
      - postgres
    networks:
      - geniuserp-network

  nginx:
    image: nginx:1.25-alpine
    container_name: geniuserp-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./client/dist:/usr/share/nginx/html
    depends_on:
      - app
    networks:
      - geniuserp-network

  postgres:
    image: postgres:15-alpine
    container_name: geniuserp-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-geniuserp}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - db_backups:/backups
    command: postgres -c 'max_connections=200' -c 'shared_buffers=512MB'
    networks:
      - geniuserp-network

  db-backup:
    image: postgres:15-alpine
    container_name: geniuserp-db-backup
    restart: unless-stopped
    volumes:
      - db_backups:/backups
    environment:
      - PGHOST=postgres
      - PGUSER=${DB_USER:-postgres}
      - PGPASSWORD=${DB_PASSWORD:-postgres}
      - PGDATABASE=${DB_NAME:-geniuserp}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    entrypoint: |
      sh -c '
        mkdir -p /backups;
        while true; do
          TIMESTAMP=$(date +%Y%m%d_%H%M%S);
          echo "Crearea backup-ului $TIMESTAMP";
          pg_dump -h postgres -U $$PGUSER $$PGDATABASE | gzip > /backups/$$PGDATABASE-$$TIMESTAMP.sql.gz;
          echo "Backup creat cu succes: /backups/$$PGDATABASE-$$TIMESTAMP.sql.gz";
          echo "Ștergerea backup-urilor mai vechi de $$BACKUP_RETENTION_DAYS zile";
          find /backups -name "$$PGDATABASE-*.sql.gz" -type f -mtime +$$BACKUP_RETENTION_DAYS -delete;
          echo "Așteptare până la următorul backup (24 ore)";
          sleep 86400;
        done
      '
    depends_on:
      - postgres
    networks:
      - geniuserp-network

  db-seed:
    image: postgres:15-alpine
    container_name: geniuserp-db-seed
    restart: "no"
    volumes:
      - db_backups:/backups
    environment:
      - PGHOST=postgres
      - PGUSER=${DB_USER:-postgres}
      - PGPASSWORD=${DB_PASSWORD:-postgres}
      - PGDATABASE=${DB_NAME:-geniuserp}
      - INITIAL_BACKUP=${INITIAL_BACKUP:-}
    entrypoint: |
      sh -c '
        echo "Verificare dacă există un backup inițial specificat...";
        if [ -n "$$INITIAL_BACKUP" ] && [ -f "/backups/$$INITIAL_BACKUP" ]; then
          echo "S-a găsit backup-ul inițial: /backups/$$INITIAL_BACKUP";
          
          # Așteptăm până când serviciul PostgreSQL este disponibil
          until pg_isready -h postgres -U $$PGUSER; do
            echo "Așteptare pentru disponibilitatea serviciului PostgreSQL...";
            sleep 2;
          done
          
          echo "Restaurare din backup-ul inițial...";
          if [[ "$$INITIAL_BACKUP" == *.gz ]]; then
            gunzip -c /backups/$$INITIAL_BACKUP | psql -h postgres -U $$PGUSER -d $$PGDATABASE;
          else
            psql -h postgres -U $$PGUSER -d $$PGDATABASE < /backups/$$INITIAL_BACKUP;
          fi
          
          if [ $? -eq 0 ]; then
            echo "Restaurare finalizată cu succes!";
          else
            echo "Eroare la restaurarea din backup!";
            exit 1;
          fi
        else
          echo "Nu s-a specificat un backup inițial sau fișierul nu există.";
          echo "Baza de date va fi inițializată cu schema implicită.";
        fi
        
        exit 0;
      '
    depends_on:
      - postgres
    networks:
      - geniuserp-network

  # ===== MONITORING STACK (PRODUCTION) =====
  
  # Prometheus - Colectare metrici
  prometheus:
    image: prom/prometheus:latest
    container_name: geniuserp-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - geniuserp-network
    restart: unless-stopped

  # Grafana - Dashboards și Alerte
  grafana:
    image: grafana/grafana:latest
    container_name: geniuserp-grafana
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_URL:-http://localhost:4000}
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
    networks:
      - geniuserp-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Loki - Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: geniuserp-loki
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - geniuserp-network
    restart: unless-stopped

  # Promtail - Log collector
  promtail:
    image: grafana/promtail:latest
    container_name: geniuserp-promtail
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - geniuserp-network
    depends_on:
      - loki
    restart: unless-stopped

  # ===== SECURITY STACK (PRODUCTION) =====

  # Falco - Runtime Security Monitoring
  falco:
    image: falcosecurity/falco-no-driver:latest
    container_name: geniuserp-falco
    privileged: true
    pid: host
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock:ro
      - /proc:/host/proc:ro
      - /etc:/host/etc:ro
      - ./monitoring/falco:/etc/falco
    environment:
      - FALCO_BPF_PROBE=""
    labels:
      - logging=promtail
      - logging_jobname=falco
    networks:
      - geniuserp-network
    restart: unless-stopped

  # Wazuh Indexer (OpenSearch)
  wazuh-indexer:
    image: wazuh/wazuh-indexer:4.7.0
    container_name: geniuserp-wazuh-indexer
    hostname: wazuh-indexer
    environment:
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
      - "bootstrap.memory_lock=true"
      - "discovery.type=single-node"
      - "network.host=0.0.0.0"
      - "plugins.security.ssl.http.enabled=false"
      - "plugins.security.disabled=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - wazuh_indexer_data:/var/lib/wazuh-indexer
    networks:
      - geniuserp-network
    restart: unless-stopped

  # Wazuh Manager
  wazuh-manager:
    image: wazuh/wazuh-manager:4.7.0
    container_name: geniuserp-wazuh-manager
    hostname: wazuh-manager
    environment:
      - INDEXER_URL=http://wazuh-indexer:9200
      - INDEXER_USERNAME=admin
      - INDEXER_PASSWORD=${WAZUH_INDEXER_PASSWORD:-SecretPassword}
      - FILEBEAT_SSL_VERIFICATION_MODE=none
      - SSL_CERTIFICATE_AUTHORITIES=""
      - SSL_CERTIFICATE=""
      - SSL_KEY=""
      - API_USERNAME=wazuh-wui
      - API_PASSWORD=${WAZUH_API_PASSWORD:-MyS3cr37P450r.*-}
    volumes:
      - wazuh_manager_data:/var/ossec/data
      - wazuh_manager_etc:/var/ossec/etc
      - wazuh_manager_logs:/var/ossec/logs
    labels:
      - logging=promtail
      - logging_jobname=wazuh-manager
    networks:
      - geniuserp-network
    depends_on:
      - wazuh-indexer
    restart: unless-stopped

  # Wazuh Dashboard
  wazuh-dashboard:
    image: wazuh/wazuh-dashboard:4.7.0
    container_name: geniuserp-wazuh-dashboard
    hostname: wazuh-dashboard
    environment:
      - INDEXER_USERNAME=admin
      - INDEXER_PASSWORD=${WAZUH_INDEXER_PASSWORD:-SecretPassword}
      - WAZUH_API_URL=https://wazuh-manager
      - DASHBOARD_USERNAME=kibanaserver
      - DASHBOARD_PASSWORD=kibanaserver
      - API_USERNAME=wazuh-wui
      - API_PASSWORD=${WAZUH_API_PASSWORD:-MyS3cr37P450r.*-}
      - OPENSEARCH_HOSTS=http://wazuh-indexer:9200
    networks:
      - geniuserp-network
    depends_on:
      - wazuh-manager
    restart: unless-stopped

networks:
  geniuserp-network:
    driver: bridge

volumes:
  postgres_data:
  app_logs:
  db_backups:
  prometheus_data:
  grafana_data:
  loki_data:
  wazuh_indexer_data:
  wazuh_manager_data:
  wazuh_manager_etc:
  wazuh_manager_logs:
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: geniuserp-app
    restart: ${CONTAINER_RESTART_POLICY}
    labels:
      - logging=promtail
      - logging_jobname=geniuserp-app
    environment:
      # Variabile de bază
      - NODE_ENV=${PROD_NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - RUN_MIGRATIONS=${PROD_RUN_MIGRATIONS}
      
      # Redis Cloud - securizat cu credentialele din Replit Secrets
      - REDIS_URL=${REDIS_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USERNAME=${REDIS_USERNAME}
      
      # Secrets pentru securitate - OBLIGATORIU să fie setate în producție!
      # ATENȚIE: Nu folosiți NICIODATĂ valorile default în producție!
      # Generați secrete puternice cu: openssl rand -base64 32
      - JWT_SECRET=${JWT_SECRET:?JWT_SECRET must be set - use: openssl rand -base64 32}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:?JWT_REFRESH_SECRET must be set - use: openssl rand -base64 32}
      - SESSION_SECRET=${SESSION_SECRET:?SESSION_SECRET must be set - use: openssl rand -base64 32}
      
      # ANAF API
      - ANAF_API_URL=${ANAF_API_URL}
      - ANAF_API_VERSION=${ANAF_API_VERSION}
      
      # Date pentru email
      - SMTP_HOST=${SMTP_HOST:-smtp.example.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-noreply@example.com}
      - SMTP_PASS=${SMTP_PASS:-smtp_password_here}
      - EMAIL_FROM=${EMAIL_FROM:-noreply@example.com}
      
      # Setări pentru logging
      - LOG_LEVEL=${PROD_LOG_LEVEL}
      - ENABLE_SQL_LOGGING=${PROD_ENABLE_SQL_LOGGING}
      
      # Sentry Error Tracking
      - SENTRY_DSN=${SENTRY_DSN}
      - VITE_SENTRY_DSN=${VITE_SENTRY_DSN}
    volumes:
      - app_logs:${APP_LOGS_PATH}
      - db_backups:${DB_BACKUPS_PATH}
    depends_on:
      - postgres
    networks:
      - geniuserp-network

  nginx:
    image: nginx:1.25-alpine
    container_name: geniuserp-nginx
    restart: ${CONTAINER_RESTART_POLICY}
    ports:
      - "${HTTP_PORT}:${HTTP_PORT}"
      - "${HTTPS_PORT}:${HTTPS_PORT}"
    volumes:
      - ./nginx/nginx.conf:${NGINX_CONF_PATH}
      - ./nginx/ssl:${NGINX_SSL_PATH}:ro
      - ./client/dist:${NGINX_HTML_PATH}
    labels:
      - logging=promtail
      - logging_jobname=nginx
    depends_on:
      - app
    networks:
      - geniuserp-network

  postgres:
    image: ${POSTGRES_IMAGE_PROD}
    container_name: geniuserp-postgres
    restart: ${CONTAINER_RESTART_POLICY}
    environment:
      # ATENȚIE SECURITATE: Setați parole puternice în producție!
      - POSTGRES_USER=${DB_USER:?DB_USER must be set in production}
      - POSTGRES_PASSWORD=${DB_PASSWORD:?DB_PASSWORD must be set - use strong password}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:${POSTGRES_DATA_PATH}
      - db_backups:${DB_BACKUPS_PATH}
    labels:
      - logging=promtail
      - logging_jobname=postgres
    command: postgres -c 'max_connections=${POSTGRES_MAX_CONNECTIONS}' -c 'shared_buffers=${POSTGRES_SHARED_BUFFERS}'
    networks:
      - geniuserp-network

  db-backup:
    image: ${POSTGRES_IMAGE_PROD}
    container_name: geniuserp-db-backup
    restart: ${CONTAINER_RESTART_POLICY}
    volumes:
      - db_backups:${DB_BACKUPS_PATH}
    environment:
      - PGHOST=postgres
      - PGUSER=${DB_USER}
      - PGPASSWORD=${DB_PASSWORD}
      - PGDATABASE=${DB_NAME}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS}
    labels:
      - logging=promtail
      - logging_jobname=db-backup
    entrypoint: |
      sh -c '
        mkdir -p ${DB_BACKUPS_PATH};
        while true; do
          TIMESTAMP=$(date +%Y%m%d_%H%M%S);
          echo "Crearea backup-ului $TIMESTAMP";
          pg_dump -h postgres -U $$PGUSER $$PGDATABASE | gzip > ${DB_BACKUPS_PATH}/$$PGDATABASE-$$TIMESTAMP.sql.gz;
          echo "Backup creat cu succes: ${DB_BACKUPS_PATH}/$$PGDATABASE-$$TIMESTAMP.sql.gz";
          echo "Ștergerea backup-urilor mai vechi de $$BACKUP_RETENTION_DAYS zile";
          find ${DB_BACKUPS_PATH} -name "$$PGDATABASE-*.sql.gz" -type f -mtime +$$BACKUP_RETENTION_DAYS -delete;
          echo "Așteptare până la următorul backup (24 ore)";
          sleep ${BACKUP_SLEEP_SECONDS};
        done
      '
    depends_on:
      - postgres
    networks:
      - geniuserp-network

  db-seed:
    image: ${POSTGRES_IMAGE_PROD}
    container_name: geniuserp-db-seed
    restart: "no"
    volumes:
      - db_backups:${DB_BACKUPS_PATH}
    environment:
      - PGHOST=postgres
      - PGUSER=${DB_USER}
      - PGPASSWORD=${DB_PASSWORD}
      - PGDATABASE=${DB_NAME}
      - INITIAL_BACKUP=${INITIAL_BACKUP}
    entrypoint: |
      sh -c '
        echo "Verificare dacă există un backup inițial specificat...";
        if [ -n "$$INITIAL_BACKUP" ] && [ -f "${DB_BACKUPS_PATH}/$$INITIAL_BACKUP" ]; then
          echo "S-a găsit backup-ul inițial: ${DB_BACKUPS_PATH}/$$INITIAL_BACKUP";
          
          # Așteptăm până când serviciul PostgreSQL este disponibil
          until pg_isready -h postgres -U $$PGUSER; do
            echo "Așteptare pentru disponibilitatea serviciului PostgreSQL...";
            sleep 2;
          done
          
          echo "Restaurare din backup-ul inițial...";
          if [[ "$$INITIAL_BACKUP" == *.gz ]]; then
            gunzip -c ${DB_BACKUPS_PATH}/$$INITIAL_BACKUP | psql -h postgres -U $$PGUSER -d $$PGDATABASE;
          else
            psql -h postgres -U $$PGUSER -d $$PGDATABASE < ${DB_BACKUPS_PATH}/$$INITIAL_BACKUP;
          fi
          
          if [ $? -eq 0 ]; then
            echo "Restaurare finalizată cu succes!";
          else
            echo "Eroare la restaurarea din backup!";
            exit 1;
          fi
        else
          echo "Nu s-a specificat un backup inițial sau fișierul nu există.";
          echo "Baza de date va fi inițializată cu schema implicită.";
        fi
        
        exit 0;
      '
    depends_on:
      - postgres
    networks:
      - geniuserp-network

  # ===== MONITORING STACK (PRODUCTION) =====
  
  # Prometheus - Colectare metrici
  prometheus:
    image: prom/prometheus:latest
    container_name: geniuserp-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:${PROMETHEUS_CONFIG_FILE}
      - prometheus_data:${PROMETHEUS_STORAGE_PATH}
    command:
      - '--config.file=${PROMETHEUS_CONFIG_FILE}'
      - '--storage.tsdb.path=${PROMETHEUS_STORAGE_PATH}'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME}'
    labels:
      - logging=promtail
      - logging_jobname=prometheus
    networks:
      - geniuserp-network
    restart: ${CONTAINER_RESTART_POLICY}

  # Grafana - Dashboards și Alerte
  grafana:
    image: grafana/grafana:latest
    container_name: geniuserp-grafana
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:${GRAFANA_DATA_PATH}
    environment:
      # SECURITATE: Schimbați parola admin în producție!
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:?GRAFANA_ADMIN_PASSWORD must be set - DO NOT use 'admin123'}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
      - GF_SERVER_ROOT_URL=${GRAFANA_URL}
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN}
      - GF_INSTALL_PLUGINS=${GF_INSTALL_PLUGINS}
    labels:
      - logging=promtail
      - logging_jobname=grafana
    networks:
      - geniuserp-network
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped

  # Loki - Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: geniuserp-loki
    user: "0:0"
    volumes:
      - ./monitoring/loki/loki-config.yml:${LOKI_CONFIG_FILE}
      - loki_data:${LOKI_DATA_PATH}
    command: -config.file=${LOKI_CONFIG_FILE}
    labels:
      - logging=promtail
      - logging_jobname=loki
    networks:
      - geniuserp-network
    restart: ${CONTAINER_RESTART_POLICY}

  # Promtail - Log collector
  promtail:
    image: grafana/promtail:latest
    container_name: geniuserp-promtail
    volumes:
      - ./monitoring/promtail/promtail-config.yml:${PROMTAIL_CONFIG_FILE}
      - ${DOCKER_SOCK_PATH}:${DOCKER_SOCK_PATH}:ro
      - ${DOCKER_CONTAINERS_PATH}:${DOCKER_CONTAINERS_PATH}:ro
    command: -config.file=${PROMTAIL_CONFIG_FILE}
    networks:
      - geniuserp-network
    depends_on:
      - loki
    restart: unless-stopped

  # ===== SECURITY STACK (PRODUCTION) =====

  # Falco - Runtime Security Monitoring
  falco:
    image: falcosecurity/falco-no-driver:latest
    container_name: geniuserp-falco
    privileged: true
    pid: host
    volumes:
      - ${DOCKER_SOCK_PATH}:/host${DOCKER_SOCK_PATH}:ro
      - ${HOST_PROC_PATH}:/host${HOST_PROC_PATH}:ro
      - ${HOST_ETC_PATH}:/host${HOST_ETC_PATH}:ro
      - ./monitoring/falco:/etc/falco
    environment:
      - FALCO_BPF_PROBE=${FALCO_BPF_PROBE}
    labels:
      - logging=promtail
      - logging_jobname=falco
    networks:
      - geniuserp-network
    restart: ${CONTAINER_RESTART_POLICY}

  # Wazuh Indexer (OpenSearch)
  wazuh-indexer:
    image: wazuh/wazuh-indexer:4.7.0
    container_name: geniuserp-wazuh-indexer
    hostname: wazuh-indexer
    environment:
      - "OPENSEARCH_JAVA_OPTS=${WAZUH_OPENSEARCH_JAVA_OPTS_PROD}"
      - "bootstrap.memory_lock=${OPENSEARCH_BOOTSTRAP_MEMORY_LOCK}"
      - "discovery.type=${OPENSEARCH_DISCOVERY_TYPE}"
      - "network.host=${OPENSEARCH_NETWORK_HOST}"
      - "plugins.security.ssl.http.enabled=${WAZUH_PLUGINS_SECURITY_SSL_HTTP_ENABLED_PROD}"
      - "plugins.security.disabled=${WAZUH_PLUGINS_SECURITY_DISABLED_PROD}"
    ulimits:
      memlock:
        soft: ${ULIMIT_MEMLOCK_SOFT}
        hard: ${ULIMIT_MEMLOCK_HARD}
      nofile:
        soft: ${ULIMIT_NOFILE_SOFT}
        hard: ${ULIMIT_NOFILE_HARD}
    volumes:
      - wazuh_indexer_data:${WAZUH_INDEXER_DATA_PATH}
    labels:
      - logging=promtail
      - logging_jobname=wazuh-indexer
    networks:
      - geniuserp-network
    restart: ${CONTAINER_RESTART_POLICY}

  # Wazuh Manager
  wazuh-manager:
    image: wazuh/wazuh-manager:4.7.0
    container_name: geniuserp-wazuh-manager
    hostname: wazuh-manager
    environment:
      - INDEXER_URL=${WAZUH_INDEXER_URL_HTTP}
      - INDEXER_USERNAME=${WAZUH_INDEXER_USERNAME_DEFAULT}
      # SECURITATE CRITICĂ: Setați parole puternice pentru Wazuh!
      - INDEXER_PASSWORD=${WAZUH_INDEXER_PASSWORD:?WAZUH_INDEXER_PASSWORD must be set}
      - FILEBEAT_SSL_VERIFICATION_MODE=${FILEBEAT_SSL_VERIFICATION_MODE}
      - SSL_CERTIFICATE_AUTHORITIES=${WAZUH_SSL_CERTIFICATE_AUTHORITIES_EMPTY}
      - SSL_CERTIFICATE=${WAZUH_SSL_CERTIFICATE_EMPTY}
      - SSL_KEY=${WAZUH_SSL_KEY_EMPTY}
      - API_USERNAME=${WAZUH_MANAGER_API_USERNAME}
      - API_PASSWORD=${WAZUH_API_PASSWORD:?WAZUH_API_PASSWORD must be set}
    volumes:
      - wazuh_manager_data:${WAZUH_MANAGER_DATA_PATH}
      - wazuh_manager_etc:${WAZUH_MANAGER_ETC_PATH}
      - wazuh_manager_logs:${WAZUH_MANAGER_LOGS_PATH}
    labels:
      - logging=promtail
      - logging_jobname=wazuh-manager
    networks:
      - geniuserp-network
    depends_on:
      - wazuh-indexer
    restart: unless-stopped

  # Wazuh Dashboard
  wazuh-dashboard:
    image: wazuh/wazuh-dashboard:4.7.0
    container_name: geniuserp-wazuh-dashboard
    hostname: wazuh-dashboard
    environment:
      - INDEXER_USERNAME=${WAZUH_INDEXER_USERNAME_DEFAULT}
      - INDEXER_PASSWORD=${WAZUH_INDEXER_PASSWORD}
      - WAZUH_API_URL=https://wazuh-manager
      - DASHBOARD_USERNAME=${WAZUH_DASHBOARD_USERNAME_DEFAULT}
      - DASHBOARD_PASSWORD=${WAZUH_DASHBOARD_PASSWORD_DEFAULT}
      - API_USERNAME=${WAZUH_MANAGER_API_USERNAME}
      - API_PASSWORD=${WAZUH_API_PASSWORD}
      - OPENSEARCH_HOSTS=${WAZUH_INDEXER_URL_HTTP}
    labels:
      - logging=promtail
      - logging_jobname=wazuh-dashboard
    networks:
      - geniuserp-network
    depends_on:
      - wazuh-manager
    restart: unless-stopped

networks:
  geniuserp-network:
    driver: ${DOCKER_NETWORK_DRIVER}

volumes:
  postgres_data:
  app_logs:
  db_backups:
  prometheus_data:
  grafana_data:
  loki_data:
  wazuh_indexer_data:
  wazuh_manager_data:
  wazuh_manager_etc:
  wazuh_manager_logs:
Hereâ€™s the **reformulated Step 88**, adapted for an Express + Drizzle setup and emphasizing **discovery and upgrade** over duplication:

---

```markdown
### ðŸ”„ Step 88: Audit & Define Inventory Controller (Express + Drizzle)

**ðŸ“Œ Description:**  
Define or enhance the `InventoryController` to handle warehouse creation and stock transfers securely. This controller must enforce access via `AuthGuard` and `RolesGuard`, and follow the existing service-based structure. Before proceeding, ensure no duplicate logic or redundant endpoints exist. Use and upgrade existing services if they are already implemented.

---

### ðŸ§  Agent Instructions:

1. **Audit First:**
   - Search `src/modules/inventory/` for any existing controllers, route handlers, or Express router definitions.
   - If a controller or route handler for warehouse or stock already exists, **upgrade it** rather than creating new logic.

2. **Create or Enhance Controller:**
   - File path: `src/modules/inventory/inventory.controller.ts`
   - Integrate existing services:
     - `ManageWarehouseService`
     - `TransferStockService`
   - Secure endpoints using `AuthGuard` and `RolesGuard`
   - Annotate routes with `@Roles('inventory_team')` for RBAC

---

### âœ… Example Controller Boilerplate:

```ts
import { Router } from "express";
import { requireAuth } from "../../common/middleware/auth.middleware";
import { roleGuard } from "../../common/middleware/roles.middleware";
import { ManageWarehouseService } from "./services/manage-warehouse.service";
import { TransferStockService } from "./services/transfer-stock.service";

const router = Router();
const warehouseService = new ManageWarehouseService();
const transferService = new TransferStockService();

router.post(
  "/warehouse",
  requireAuth,
  roleGuard(["inventory_team"]),
  async (req, res) => {
    const { companyId, franchiseId, name, location } = req.body;
    const result = await warehouseService.createWarehouse(companyId, franchiseId, name, location);
    res.json(result);
  }
);

router.post(
  "/transfer",
  requireAuth,
  roleGuard(["inventory_team"]),
  async (req, res) => {
    const { stockId, toWarehouseId, quantity } = req.body;
    const result = await transferService.transferStock(stockId, toWarehouseId, quantity);
    res.json(result);
  }
);

export default router;
```

---

### ðŸ“Œ Finalize:

- Place controller in `src/modules/inventory/`
- Register the route in your inventory moduleâ€™s `index.ts` or central Express route loader
- Add to `server/app.ts` or global route loader:  
  `app.use("/v1/inventory", inventoryController);`
- Run `npm run build` and test endpoints with a valid JWT

---

### ðŸ§ª Verification:

- `POST /v1/inventory/warehouse` â†’ Should create a new warehouse if role is allowed
- `POST /v1/inventory/transfer` â†’ Should transfer stock and log the operation

---

### ðŸ§­ Outcome:

> A secure, centralized `InventoryController` for GeniusERP v.2 that avoids redundant logic and integrates cleanly with existing Drizzle + Express services and middleware.

Let me know if youâ€™d like help restructuring inventory route registration or verifying guard behavior.
```
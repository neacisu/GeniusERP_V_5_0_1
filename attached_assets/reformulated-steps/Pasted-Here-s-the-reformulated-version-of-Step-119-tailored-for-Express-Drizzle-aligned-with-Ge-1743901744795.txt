Here's the **reformulated version of Step 119**, tailored for **Express + Drizzle**, aligned with GeniusERP's backend standards:

---

```markdown
### 🧩 Step 119: Audit & Upgrade SalesController with Customer Endpoint (Express + Drizzle)

📌 **Description**  
Replace the placeholder in the SalesController with a real `/api/sales/customer` endpoint that uses `CustomerService` to create customers in the CRM database. Ensure the route is protected with `AuthGuard.protect(JwtAuthMode.REQUIRED)`, `AuthGuard.roleGuard(['sales_team'])`, and `AuthGuard.companyGuard()` to enforce security, role permissions, and company context.

---

### 🧠 Agent Instructions

#### 1. 🔍 Check for Existing Controller

Look in:
- `src/modules/sales/sales.controller.ts`

If the file or `/customer` endpoint already exists:
- ✅ **Don’t duplicate**
- 🔧 **Upgrade it** to include:
  - `/api/sales/customer` route
  - Authentication middleware
  - CustomerService integration

---

#### 2. 🧱 If Not Found — Create/Update Controller

Edit or create:  
`src/modules/sales/sales.controller.ts`

```ts
import { Router } from "express";
import { CustomerService } from "./customer.service";
import { AuthGuard } from "../../common/middleware/auth.middleware";

const router = Router();
const customerService = new CustomerService();

// Apply auth guards globally to all routes in this controller
router.use(
  AuthGuard.protect("REQUIRED"),
  AuthGuard.roleGuard(["sales_team"]),
  AuthGuard.companyGuard()
);

router.post("/customer", async (req, res) => {
  try {
    const { companyId, franchiseId, name, email } = req.body;
    const customer = await customerService.createCustomer(companyId, franchiseId, name, email);
    return res.json(customer);
  } catch (err) {
    console.error("Error creating customer:", err);
    return res.status(500).json({ error: "Failed to create customer" });
  }
});

export default router;
```

---

#### 3. 🔗 Register Controller in App

In your `server.ts` or equivalent entry:

```ts
import salesRoutes from "./modules/sales/sales.controller";
app.use("/api/sales", salesRoutes);
```

---

### ✅ Outcome

> The `/api/sales/customer` route is now live and secured. It supports customer creation via `CustomerService`, fully integrated with Express + Drizzle + AuthGuard middleware stack.

Let me know if you want to add:
- `GET /customers` with filtering by company/franchise
- `PUT /customer/:id` update
- CRM segmentation logic
```
Here is the **reformulated Step 115**, fully adapted for **Express with Drizzle**, using `/api/` as the base path, and enforcing consistent authentication (`AuthGuard.protect(JwtAuthMode.REQUIRED)`, `AuthGuard.roleGuard()`, `AuthGuard.companyGuard()`), while instructing the agent to avoid redundancy:

---

```markdown
### üí≥ Step 115: Implement `PaymentService` for Stripe Integration (Express + Drizzle)

üìå **Description**  
Develop a `PaymentService` within the **E-commerce** module to process payments via Stripe and record the transaction in the `Transaction` table using **Drizzle ORM**. This aligns with Section 4.1.4.8 and ensures seamless payment handling inside GeniusERP v.2.

---

### üß† Agent Instructions

#### 1. üîç Check for Existing Payment Logic

Before implementing:
- Look in:  
  - `src/modules/ecommerce/payment.service.ts`  
  - `src/modules/transactions/`  
  - Any shared payment utilities or service registry

‚û°Ô∏è **If service already exists**:
- DO NOT create a duplicate.
- ‚úÖ Instead, upgrade the existing `PaymentService`:
  - Ensure it uses **Drizzle** (not Prisma)
  - Ensure integration with Stripe SDK
  - Ensure the logic stores transaction to `transaction` table
  - Ensure it is using the correct `/api/` route base
  - Ensure it's secured with:
    - `AuthGuard.protect(JwtAuthMode.REQUIRED)`
    - `AuthGuard.roleGuard()`
    - `AuthGuard.companyGuard()`

‚û°Ô∏è **If not found**, implement the following:

---

### üß± 2. Create Service File

Create:  
`src/modules/ecommerce/payment.service.ts`

```ts
import { eq } from "drizzle-orm";
import { Injectable } from "express-di";
import Stripe from "stripe";
import { db } from "../../common/db";
import { transactions } from "../../db/schema/transactions";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2023-10-16",
});

@Injectable()
export class PaymentService {
  async processPayment({
    companyId,
    franchiseId,
    amount,
    paymentMethodId,
  }: {
    companyId: string;
    franchiseId: string;
    amount: number;
    paymentMethodId: string;
  }) {
    const paymentIntent = await stripe.paymentIntents.create({
      amount: amount * 100, // Stripe uses cents
      currency: "usd",
      payment_method: paymentMethodId,
      confirmation_method: "manual",
      confirm: true,
    });

    const [inserted] = await db
      .insert(transactions)
      .values({
        company_id: companyId,
        franchise_id: franchiseId,
        amount,
        payment_method: "card",
        status: paymentIntent.status,
      })
      .returning();

    return inserted;
  }
}
```

---

### üß© 3. Register in Ecommerce Module

Edit:  
`src/modules/ecommerce/ecommerce.module.ts`

```ts
import { PaymentService } from "./payment.service";

export const ecommerceProviders = [
  PaymentService,
  // Add others if needed
];
```

---

### ‚úÖ Result

The `PaymentService` is now ready to:
- Process real payments via Stripe
- Record transactions via Drizzle in the `transactions` table
- Integrate with `/api/ecommerce/` controller logic securely

Let me know if you'd like to:
- Scaffold `/api/ecommerce/payment` controller next
- Mock payment method creation for test cards
- Create a webhook endpoint for Stripe events
```
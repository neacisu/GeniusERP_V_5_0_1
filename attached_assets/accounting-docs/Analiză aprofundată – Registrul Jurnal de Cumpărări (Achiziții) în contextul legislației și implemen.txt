Analiză aprofundată – Registrul Jurnal de Cumpărări (Achiziții) în contextul legislației și implementăriiCerințe legale și standarde contabile pentru Jurnalul de CumpărăriObligație legală: Jurnalul de cumpărări este un registru contabil obligatoriu pentru orice entitate înregistrată în scopuri de TVA, conform Codului Fiscal art. 319. Acesta funcționează ca registru auxiliar al registrului-jurnal general și cuprinde toate operațiunile de achiziții (bunuri și servicii) supuse TVA, în scopul determinării TVA deductibile lunar[1][2]. Legea contabilității nr. 82/1991 nu menționează explicit jurnalul de cumpărări, însă legislația fiscală impune ținerea acestuia de către plătitorii de TVA, iar Ordinul MFP 2634/2015 privind documentele financiar-contabile îl include în nomenclatorul registrelor obligatorii. Potrivit OMFP 2634/2015 (Normele generale de întocmire și utilizare a documentelor financiar-contabile), toate operațiunile economice trebuie înregistrate cronologic, iar jurnalul de cumpărări/vânzări este prevăzut ca instrument pentru evidența TVA în mod corespunzător[3][2].Informații obligatorii în registru: Conform reglementărilor în vigoare, jurnalul de cumpărări se întocmește sub formă de tabel în care se înscriu pentru fiecare factură de achiziție următoarele elemente minimale: denumirea furnizorului, codul de identificare fiscală al furnizorului (CUI/CIF), numărul și data facturii, valoarea totală a facturii, baza impozabilă (fără TVA) și valoarea TVA deductibilă[4]. Aceste informații permit identificarea fiecărei operațiuni și calculul exact al TVA deduse în perioadă. Lipsa oricăruia dintre aceste elemente pe factură sau în evidențe poate duce la pierderea dreptului de deducere a TVA pentru respectiva achiziție[5]. De asemenea, în practică jurnalul de cumpărări este deseori structurat pe coloane separate pentru diferite cote de TVA (19%, 9%, 5%) și tipuri de operațiuni, facilitând totalizarea pe categorii la sfârșitul lunii și verificarea cu decontul de TVA (formular D300). Instrucțiunile de completare a decontului TVA indică preluarea sumelor din jurnalul de cumpărări (de ex. la rândurile privind achizițiile taxabile și taxa deductibilă)[6]. Astfel, registrul trebuie să permită gruparea achizițiilor în funcție de tratamentul fiscal: bunuri și servicii taxabile cu cota standard sau redusă, achiziții scutite, achiziții cu taxare inversă (interna sau intracomunitară), etc., pentru a corespunde raportărilor fiscale.Norme contabile naționale: În contabilitatea în partidă dublă, fiecare factură de cumpărare trebuie înregistrată prin articole contabile corespunzătoare. Planul de conturi general (OMFP 1802/2014) prevede conturile specifice acestor operațiuni: 401 „Furnizori” (creditor – de înregistrat obligația de plată către furnizor), 4426 „TVA deductibilă” (debitor – evidențierea TVA deductibile de pe factură) și conturi de cheltuieli sau active din clasa 6 sau 2 pentru valoarea fără TVA (debitor – achiziția de bunuri, servicii, materii prime, mijloace fixe etc.). În cazul firmelor care aplică sistemul TVA la încasare, trebuie utilizat și contul 4428 „TVA neexigibilă” pentru amânarea deductibilității până la plată. De exemplu, la înregistrarea unei facturi de cumpărare de materii prime cu TVA: debit 301/302 = baza fără TVA, debit 4426 = TVA deductibilă (dacă este deductibilă imediat), credit 401 = total factura[7][8]. Dacă firma aplică TVA la încasare, în loc de 4426 se va debita 4428 (TVA neexigibilă) urmând ca la plata furnizorului să se transfere suma în 4426. Standardele contabile românești cer ca aceste operațiuni să se regăsească și în Registrul-Jurnal general al entității, asigurând astfel integrarea jurnalului de cumpărări în evidența contabilă cronologică completă. Principiul dublei înregistrări impune ca fiecare factură introdusă în jurnalul de cumpărări să aibă corespondent o notă contabilă (articol în jurnalul general) care să reflecte furnizorul, TVA și cheltuiala/activul, garantând că situațiile financiare și balanța contabilă includ aceste datorii și drepturi de deducere.Perioada și forma de întocmire: Jurnalul de cumpărări se întocmește de regulă lunar (pentru plătitorii de TVA lunar) sau trimestrial (pentru plătitori la trimestru), însă înregistrările în sistemele informatice pot fi făcute continuu, pe măsură ce facturile sunt primite. Conform reglementărilor, registrul poate fi ținut pe suport hârtie sau electronic, atâta timp cât conține toate elementele obligatorii și este disponibil pentru control. OMFP 2634/2015 impune ca registrele să fie tipărite și legate anual dacă sunt ținute electronic, paginile numerotate, și arhivate timp de 5 ani (conform Legii 36/2023)[9][10]. Jurnalul de cumpărări nu are un formular standardizat unic prin lege (nu mai există formulare tipizate strict, de la abrogarea Ordinului 171/2004), însă în practică se respectă conținutul minim impus și se pot folosi modele personalizate sau exporturi din programul de contabilitate. Important de menționat, pentru firmele care aplică TVA la încasare, legislația fiscală prevede că TVA devine deductibilă numai la plata furnizorului. Astfel, jurnalul de cumpărări al acestor firme trebuie întocmit ținând cont de plățile efectuate – în practică, programul de contabilitate va marca sau include facturile respective în jurnalul perioadei doar după înregistrarea plății. De exemplu, o recomandare uzuală este „Dacă aveți TVA la încasare, jurnalul de cumpărări se listează numai după ce ați operat casa și banca”, evidențiind că fără evidența plăților, registrul de cumpărări nu ar reflecta corect TVA deductibilă exigibilă[11].Raportări electronice recente (SAF-T): Începând cu 2022-2025, România a implementat fișierul standard de control fiscal SAF-T (Declarația informativă D406), care solicită detalierea tranzacțiilor contabile, inclusiv a facturilor de cumpărare, în format electronic standardizat. Toate facturile primate (de achiziții) trebuie raportate în secțiunea dedicată (Purchase Ledger) a fișierului SAF-T, cu informații precum: identificatorul furnizorului (denumire, cod fiscal), data și numărul facturii, baza și TVA, tipul documentului (factură, bon fiscal, autofactură etc.) ș.a.[12][13]. Autoritățile fiscale verifică astfel concordanța între jurnalul de cumpărări al firmei și declarațiile depuse. Formatul SAF-T (stabilit prin Ordinul ANAF nr. 1783/2021) include nomenclatoare standard – de exemplu, InvoiceType cu coduri precum 380 pentru factură, 381 pentru notă de credit, 389 pentru autofactură etc., ce trebuie utilizate la clasificarea fiecărui document[14][15]. Implementarea completă a jurnalului de cumpărări în sistemul informatic trebuie deci să țină cont și de capacitatea de a produce aceste raportări electronice: sistemul ar trebui să poată genera fișierul XML D406 cu sub-secțiunea de PurchaseInvoices populată corect cu toate achizițiile perioadei. Pe lângă SAF-T, jurnalul de cumpărări servește și la întocmirea altor raportări cum ar fi declarațiile informative (de ex. D394 în cazul achizițiilor interne de la plătitori/neplătitori de TVA, dacă este cazul menționării partenerilor). Concluzie: din perspectivă legală, aplicația trebuie să asigure că pentru fiecare factură de achiziție se colectează și se stochează toate datele cerute de lege, se înregistrează corect în contabilitate și se pot genera rapoarte conforme (atât în format uman – registru listat, cât și electronic – SAF-T, declarații).Auditul implementării actuale în aplicație (stare curentă)Implementarea existentă a jurnalului de cumpărări în aplicația GeniusERP (versiunea 5.0.1) oferă o bază de date și funcționalități primare pentru înregistrarea facturilor de achiziție de la furnizori. În continuare, evaluăm modul actual de funcționare și conformitatea acestuia cu cerințele expuse mai sus:Structura de date și stocarea facturilor de achizițiiModelul de date unificat: Aplicația reutilizează modelul de factură existent (tabela comună invoices) pentru a stoca atât facturile de vânzare, cât și pe cele de cumpărare, deosebindu-le prin câmpul type. O factură de achiziție este inserată cu type = 'PURCHASE' în tabela invoices[16][17]. Câmpurile generale precum invoiceNumber (serie/număr document extern), issueDate/date (data emiterii), dueDate (scadența), sumele nete și TVA (netAmount, vatAmount, amount total) sunt folosite și pentru achiziții. Observăm însă o practică improprie: câmpurile destinate clientului (customerId, customerName) sunt folosite pentru a stoca identitatea furnizorului în cazul facturilor de cumpărare. Atât ID-ul intern al partenerului (furnizorului) cât și denumirea acestuia sunt salvate în aceste coloane la înregistrare[18]. Acest lucru asigură păstrarea unei legături cu tabela de parteneri (dacă furnizorul există ca entitate în CRM-ul aplicației), însă utilizarea coloanelor "customer" pentru furnizori este neobișnuită și poate genera confuzie. Ar fi de preferat fie utilizarea unui set separat de coloane (ex: supplierId, supplierName), fie unificarea conceptului de partener (client/furnizor) într-o singură entitate, dar cu clarificarea rolului.Detalii specifice partenerului (CUI, adresă): Există în schema de date o tabelă dedicată invoice_details pentru informații detaliate despre partener și plata facturii[19]. Aceasta conține câmpuri precum partnerFiscalCode (cod fiscal furnizor), partnerRegistrationNumber (număr de ordine la Registrul Comerțului), partnerAddress, partnerCity etc., care ar fi esențiale pentru conformitatea jurnalului de cumpărări. În implementarea curentă însă, la înregistrarea unei facturi de furnizor nu se populează aceste detalii – logica existentă (PurchaseJournalService.recordSupplierInvoice) inserează datele doar în invoices și invoice_lines, fără a adăuga o înregistrare în invoice_details[18][20]. Concret, atunci când utilizatorul înregistrează o factură de cumpărare, aplicația preia denumirea furnizorului și ID-ul (dacă este selectat din baza de date de parteneri) și le introduce în invoices.customerName și customerId. Codul fiscal al furnizorului (CUI/CIF) însă nu ajunge în mod direct în baza de date la acea operațiune – el există probabil în fișa furnizorului din modulul CRM, dar nu este copiat în registrul facturii. Acest aspect reprezintă o neconformitate cu cerințele legale, întrucât jurnalul de cumpărări trebuie să prezinte codul fiscal al furnizorilor pentru fiecare factură[4]. În starea actuală, extragerea unui jurnal complet ar necesita realizarea unui join între tabela invoices și tabelul de parteneri pentru a prelua CUI-ul, ceea ce complică lucrurile și poate fi susceptibil de erori (de exemplu, dacă între timp se modifică datele partenerului).Pe lângă codul fiscal, lipsesc și adresa furnizorului și numărul de înregistrare al acestuia, informații recomandate a fi incluse (deși nu neapărat cerute explicit în jurnal, ele apar pe factură și pot fi solicitate la control). Concluzionând, schema de date are prevăzute câmpurile necesare (prin invoice_details), dar implementarea nu le utilizează încă, ducând la o evidență incompletă direct în registru. Această deficiență trebuie corectată pentru a asigura autonomia jurnalului (să se poată lista toate datele cerute fără referințe externe).Liniile facturii și categorii de TVA: Liniile aferente facturilor (tabela invoice_lines) sunt populate atât pentru vânzări, cât și pentru cumpărări. În cazul achizițiilor, fiecare linie reține descrierea produsului/serviciului, cantitatea, prețul unitar, valoarea netă, cota TVA aplicată și valoarea TVA, similar cu facturile de vânzare[21]. Schema recentă a introdus câmpul vatCategory la nivel de linie – un cod enum care indică categoria fiscală (standard 19%, redus 9%/5%, scutit cu drept de deducere, scutit fără drept, taxare inversă etc.)[22][23]. Pentru facturile de cumpărare interne obișnuite, acest câmp ar fi probabil STANDARD_19 sau altă cotă, iar pentru achiziții intracomunitare sau alte situații speciale, s-ar folosi valorile relevante (REVERSE_CHARGE pentru taxare inversă internă, sau evidențierea că e scutit etc.). În implementarea actuală, nu este clar dacă la înregistrarea achizițiilor se setează corect categoria fiscală pe linii – acest aspect ar trebui verificat. Având însă în vedere efortul făcut pe jurnalul de vânzări (unde s-a implementat determinarea automată a categoriei TVA la fiecare linie[24][25]), este probabil că aceeași structură va fi sau ar trebui folosită și pentru jurnalul de cumpărări, pentru a putea grupa achizițiile după cote (ex. total bază și TVA 19%, 9% etc. pe lună) și a facilita raportările (inclusiv SAF-T, care cere detalierea tipului de fiecare factură).Integritatea și numerotarea înregistrărilor: Facturile de cumpărare, spre deosebire de cele de vânzare, nu sunt emise de firmă, deci nu necesită o serie internă de numerotare. Cu toate acestea, în practică multe companii atribuie un număr de ordine intern în registrul de cumpărări, pentru referință. Aplicația folosește câmpul invoiceNumber pentru a stoca numărul facturii furnizorului, iar pentru vânzări are sistem de generare serie/număr intern (câmpurile series și number din tabelă, cu unicitate impusă[26][27]). Pentru facturile de cumpărare, aceste câmpuri series/number nu sunt populate automat – nu este neapărat o problemă legală (codul fiscal nu cere numerotare internă a facturilor de intrare), însă dacă se dorește, s-ar putea folosi un contor intern (de exemplu, numerotare 1,2,3... pe fiecare lună sau an) pentru ușurința organizării. În prezent, integritatea datelor este asigurată prin faptul că fiecare factură primește un ID unic (UUID) și este legată de companie, putându-se astfel filtra per entitate și perioadă.Înregistrarea facturilor de cumpărare – logica serviciului Purchase JournalSalvarea facturii în baza de date: Operația este gestionată de metoda recordSupplierInvoice din PurchaseJournalService. Auditând codul, observăm pașii următori la salvare: se generează sau preia un invoiceId unic, se calculează totalurile net, TVA și brut parcurgând liniile transmise, apoi se inserează în tabela invoices o nouă înregistrare cu toate câmpurile relevante[28][29]. Important, se setează type: 'PURCHASE' și status: 'issued' implicit (factura este considerată emisă/înregistrată în sistem)[30]. De asemenea, se creează un text descriptiv în câmpul description al facturii, de forma “Purchase invoice [număr] from [nume furnizor]” – adică “Factura de achiziție [număr] de la [furnizor]”[30]. Acest description este util pentru identificare rapidă, deși în interfață cu siguranță se vor afișa și câmpurile dedicate.Liniile facturii sunt apoi inserate una câte una în invoice_lines, cu valorile specificate (cantitate, preț, net, TVA, etc.)[31][32]. Aplicația calculează automat totalurile pe factură și pe linie (asigurând că net + TVA = total pe fiecare poziție și în total), conform codului de validare care verifică corespondența acestor sume[33][34]. Din perspectiva corectitudinii matematice, implementarea se conformează cerințelor – există chiar verificări în metodă care aruncă erori dacă totalurile trimise nu coincid cu recalculul (prevenind astfel eventuale inconsistențe introduse manual)[33][34]. Tot în faza de validare se impun reguli specifice legislației române: de exemplu, nu se acceptă o dată a facturii mai veche cu peste 15 zile față de prezent, considerând probabil prevederi fiscale privind înregistrarea facturilor într-o anumită perioadă[35]. (Mențiune: Codul fiscal impune de obicei ca facturile primite într-o lună să fie înregistrate și deduse fie în decontul acelei luni, fie cel târziu în următoarele, dar limita de 15 zile pare a fi o regulă internă a aplicației inspirată poate din necesități de tăiere de decont sau din vechi practici – merită verificat dacă această restricție este într-adevăr cerută de vreo normă. Oricum, existența acestor validări arată atenția la conformitate.) De asemenea, se validează prezența unui furnizor și a datelor sale esențiale (CUI sau CIF, număr de înregistrare, adresă) înainte de salvare[36][37] – aceste verificări corespund cerințelor legale ca fiecare factură să aibă un furnizor identificat clar. Dacă utilizatorul nu completează aceste date la factură, aplicația nu va permite înregistrarea, forțând astfel corectitudinea evidenței.Reținerea tipului de cheltuială și deductibilitatea TVA: O facilitate notabilă este că la creare se poate specifica expenseType și un indicator deductibleVat (adevărat/fals) pentru factură[38][39]. expenseType semnalează natura achiziției – bunuri (marfă, materii prime) sau servicii, utilități, imobilizări etc. – și este folosit ulterior pentru a determina automat contul de cheltuială corespunzător la generarea notei contabile[40][41]. Flag-ul deductibleVat indică dacă TVA-ul de pe acea factură este integral deductibil sau nu. În practică, această opțiune acoperă scenariul în care o factură are TVA nedeductibil (total sau parțial) conform Codului Fiscal – de exemplu, cheltuieli de protocol peste plafon, achiziții de vehicule pentru care deducerea e limitată 50%, etc. Momentan, implementarea tratează acest flag în modul următor: dacă deductibleVat este true, la generarea articolului contabil se va înregistra TVA în contul 4426; dacă este false, se presupune că TVA nu se deduce. Observație: Codul ce generează notele contabile (vezi secțiunea următoare) adaugă o linie de debit 4426 doar dacă vatAmount > 0 și deductibleVat === true[42]. Dacă deductibleVat este false, nu adaugă nicio linie pentru TVA. Aceasta poate duce la un dezechilibru în articolul contabil generat: creditul 401 conține suma totală (inclusiv TVA), debitul contului de cheltuială conține doar baza netă, iar fără un debit de TVA, totalul debitor ar fi mai mic decât cel creditor. Din fericire, în implementarea actuală nota contabilă nici nu este creată automat (vezi mai jos), deci acest dezechilibru nu se materializează încă. Însă este clar că logica trebuie completată – în cazul TVA nedeductibil, suma TVA ar trebui probabil adăugată la o cheltuială (ex. cont 635 „Cheltuieli cu alte impozite nedeductibile” sau incorporată în costul de achiziție al bunului dacă legislația permite). Aceasta este o lacună funcțională de avut în vedere: deși aplicația permite marcarea TVA ca nedeductibil, nu există încă tratament contabil complet pentru el.Integrarea contabilă (generarea notelor contabile în registrul general)Există funcționalitate, dar neactivată în flux: Un element critic al oricărei aplicații ERP este ca fiecare factură de cumpărare să fie integrată în contabilitate. În codul sursă, am identificat metoda createPurchaseInvoiceEntry(data: PurchaseInvoiceData) în PurchaseJournalService, care are rolul de a construi nota contabilă (înregistrarea în jurnalul general) pentru o factură de achiziție[43]. Această funcție pregătește un set de ledger lines (linii contabile) pe baza datelor facturii primite:• 401 Furnizori – credit cu suma totală (valoarea brută a facturii)[8], cu descrierea "Supplier: [nume], Invoice: [număr]". Practic, se evidențiază datoria către furnizor.• 4426 TVA deductibilă – debit cu valoarea TVA, doar dacă factura are TVA deductibil (logică prezentă: if (vatAmount > 0 && deductibleVat))[42]. Descrierea indică cota TVA și numărul facturii.• Cont de cheltuială/activ – debit cu valoarea netă (baza fără TVA)[44]. Contul este ales automat în funcție de expenseType: de exemplu, pentru merchandise (marfă) se folosește contul 371, pentru services contul 628, pentru equipment contul 213 etc., conform unui dicționar prestabilit[45][46]. Astfel, aplicația știe să folosească conturile din planul de conturi corespunzător tipului de achiziție, ceea ce este foarte util pentru consistența contabilă.• Diferențe de curs valutar (dacă e cazul): Codul are un bloc comentat (TODO) care menționează adăugarea eventualelor note de diferențe de curs[47]. Se precizează că ar trebui comparat cursul folosit pe factură cu cursul oficial BNR din data respectivă și create linii contabile corespunzătoare. În implementarea actuală, acest pas nu este realizat – deci, dacă o factură este în valută, se înregistrează la cursul furnizat (câmpul exchangeRate este stocat în factură[29]), dar nu se calculează automat vreun câștig/pierdere din curs la momentul înregistrării. De asemenea, nu există logică pentru reevaluarea la plată sau la final de lună a datoriilor în valută. Aceasta este o funcționalitate neimplementată încă (marcată ca TODO) și reprezintă o cerință pentru conformitate deplină (legislația cere înregistrarea diferențelor de curs în contabilitate la decontare sau la inventariere, conturi 665/765). Vom reveni la acest aspect la planul de implementare.După construirea vectorului de linii contabile, createPurchaseInvoiceEntry apelează serviciul general de jurnal (JournalService.createLedgerEntry) care inserează efectiv în tabela de registre contabile (ledger_entries și ledger_lines) nota contabilă, de tip PURCHASE (achiziție)[48]. În mod normal, ar trebui apoi să actualizeze factura cu referința la această notă contabilă (câmpul ledgerEntryId din tabelă). Problema identificată: nicăieri în fluxul actual de salvare a facturii nu este apelată această funcție. În recordSupplierInvoice, după inserarea în invoices și invoice_lines, funcția pur și simplu returnează ID-ul facturii create[20], fără să genereze automat nota contabilă. De asemenea, în PurchaseJournalController, operația de înregistrare factură doar apelează serviciul de salvare și returnează factura, fără vreo referire la contabilitate[49][50]. Rezultă că, în starea curentă, facturile de cumpărare nu sunt reflectate automat în Registrul-Jurnal general al aplicației. Acest lucru înseamnă o neconformitate contabilă: practic, utilizatorul înregistrează factura în modulul de achiziții, dar contabilul ar trebui apoi să facă manual notele contabile sau să ruleze o altă procedură pentru a le genera. În lipsa acestei etape, balanța contabilă a firmei nu include datoriile către furnizori și TVA deductibil aferent, ceea ce este inacceptabil dacă nu se corectează înainte de întocmirea situațiilor financiare sau a declarațiilor.Este de menționat că pentru jurnalul de vânzări (facturi emise) s-a implementat recent un mecanism similar de generare a notelor contabile la validarea facturilor, deci este de așteptat ca aplicația să fie extinsă să facă același lucru și pe partea de cumpărări. Tabela invoices are câmpurile isValidated, validatedAt și ledgerEntryId[51][52], sugerând că fluxul dorit este: utilizatorul introduce factura (status=issued), apoi o validează (confirmând că e finală), moment în care isValidated devine true, ledgerEntryId primește valoare și se creează nota contabilă. Deocamdată însă, acești pași nu sunt conectați pentru achiziții.Concluzie la acest capitol: Aplicația conține toată logica necesară pentru generarea unei note contabile corecte și conforme pentru o factură de cumpărare (folosind conturile contabile potrivite și ținând cont de TVA deductibil/nedeductibil), dar această logică este inactivă în fluxul curent. Practic, se pierde beneficiul automatizării contabile – trebuie intervenție manuală. Acesta este un punct critic de rezolvat pentru a alinia implementarea la cerințele de înregistrare completă și cronologică a tuturor operațiunilor economice (principiu fundamental al Legii contabilității).Gestionarea plăților facturilor de cumpărare și TVA la încasareModulul de Jurnal de cumpărări include și funcționalitatea de a înregistra plăți efectuate către furnizori, asociate facturilor, ceea ce este util atât pentru evidența obligațiilor achitate/neachitate, cât și pentru mecanismul TVA la încasare. În PurchaseJournalController există endpoint-ul recordInvoicePayment care primește un paymentData și îl transmite spre salvare[53][54]. În serviciul corespunzător (PurchaseJournalService.recordInvoicePayment), se apelează inserarea în tabela invoice_payments. Auditând schema acestei tabele, remarcăm că ea stochează: ID-ul facturii plătite, suma plătită, data plății, metoda de plată (numerar, transfer bancar etc.), referința plății (ex. număr chitanță sau ordin de plată) și chiar legături către registrul de casă sau jurnalul bancă dacă plata provine de acolo[55][56]. Astfel, sistemul permite legarea plăților de facturi cu tranzacțiile din casierie sau bancă, menținând consistența între jurnalul de cumpărări și registrele de trezorerie.Un aspect foarte important: tabela invoice_payments conține câmpuri specializate pentru TVA la încasare – vatTransferLedgerId și vatAmountTransferred[57]. Acestea sunt menite să păstreze informații despre nota contabilă generată în momentul în care TVA devine exigibilă la plata unei facturi (transfer din contul 4428 TVA neexigibil în 4426 TVA deductibil) și suma de TVA transferată. În implementarea actuală, nu am identificat totuși codul care realizează efectiv acest transfer pentru achiziții. Pe partea de vânzări, documentația indică existența unei metode transferDeferredVAT() pentru facturile emise cu TVA la încasare, care la încasare mută TVA din 4428 în 4427[58][59]. Prin analogie, pentru cumpărări ar trebui un mecanism care la plata facturii să debiteze 4426 și să crediteze 4428 (TVA deductibil acum devenit exigibil). Cel mai probabil, această funcționalitate este în plan dar nu a fost încă implementată – în fluxul curent, dacă o firmă este marcată ca aplicând TVA la încasare (flag companies.use_cash_vat) și o factură de cumpărare are isCashVAT=true, aplicația nu face nimic special la plată (în afară de marcajul în invoice_payments). Consecința este că, fără intervenție, în contabilitate TVA-ul respectiv ar rămâne în 4428 și nu s-ar muta automat în 4426, necesitând o operațiune manuală de regularizare.Starea actuală: Înregistrarea plăților funcționează cel puțin ca evidență (confirmare că factura a fost plătită total sau parțial și când). Aceasta ajută utilizatorul să știe ce facturi sunt neachitate și face posibilă implementarea ulterioară a componentelor de datorii scadente sau rapoarte de cash-flow. Din perspectiva jurnalului de cumpărări, legătura cu plățile este esențială pentru TVA la încasare (cum am menționat) – doar după ce o factură este marcată ca plătită (integral sau parțial) se va putea deduce TVA aferent acelei plăți. În forma actuală însă, nu există un raport sau o actualizare automată a jurnalului la plata facturii: ideal ar fi ca, pentru firmele cu TVA la încasare, jurnalul de cumpărări să poată fi generat la final de perioadă țînând cont de ce facturi au fost plătite (astfel incluzând TVA deductibil doar pentru acelea). Deocamdată, utilizatorul ar trebui manual să facă această filtrare sau calcul.Un alt aspect legat de plăți este valuta: dacă facturile de cumpărare sunt în monedă străină, plățile probabil se pot înregistra atât în valută, cât și echivalentul în RON. Schema invoice_payments nu are un câmp de valută explicit (presupune că moneda este aceeași ca a facturii, iar compania are oricum moneda de bază RON). Nu pare să existe (încă) calcul de diferențe de curs la plată: în mod normal, la plata unei datorii în valută, dacă cursul diferă față de cel de la data facturii, apare o diferență (favorabilă sau nefavorabilă) ce trebuie contabilizată (665/765). Dat fiind că aplicația nu are încă implementat modulul de diferențe de curs, utilizatorul ar trebui să facă manual această înregistrare contabilă. Totuși, prezența conturilor 665 și 765 în constanții contabili ai aplicației[60] și comentariile TODO pe această temă[47] indică faptul că dezvoltatorii au în vedere această funcționalitate.Funcționalități de raportare – extragerea Jurnalului de CumpărăriÎn prezent, aplicația permite CRUD (creare, vizualizare, modificare, ștergere) pe facturile de cumpărare prin PurchaseJournalController și metoda getSupplierInvoices pentru listarea lor cu paginație și filtre[61][62]. Astfel, utilizatorul poate vizualiza în interfață o listă de facturi de achiziție înregistrate, filtrate după perioadă, furnizor, status etc. Totuși, nu există încă un raport dedicat formatat ca “Jurnal de cumpărări”. Adică, nu s-a implementat o pagină de raport sau o funcție de export care să prezinte toate achizițiile dintr-o perioadă într-un tabel cu coloanele cerute (furnizor, CUI, număr, dată, bază, TVA, total), ordonate cronologic. Această funcționalitate este esențială pentru a putea tipări registrul oficial sau pentru a verifica totalurile de TVA. În lipsa ei, un contabil ar trebui să exporte date brute din listă și să le prelucreze manual (de exemplu, să le importe în Excel și să creeze sumarizări). De asemenea, nu există în UI opțiuni de a afișa totaluri pe cote de TVA sau categorii de achiziții – lucru necesar pentru verificări (ex: total baza și TVA 19% într-o lună vs. rândul corespunzător din decontul de TVA).Un alt raport potențial legat de jurnalul de cumpărări este integrarea cu Declarația 394 (formular care cere listarea tuturor furnizorilor plătitori de TVA de la care s-au făcut achiziții într-un trimestru, cu sumele totale pe fiecare). Deși aplicația nu menționează direct, odată având jurnalul corect populat cu CUI furnizor și sume, generarea automată a datelor pentru D394 ar fi un pas logic. Însă, deocamdată, accentul este pe conformitatea internă a jurnalului.Rapoarte SAF-T: În ceea ce privește SAF-T, aplicația în versiunea curentă nu pare să aibă un modul de generare a fișierului XML. Probabil că acesta este un obiectiv de dezvoltare viitor. Pentru ca acest lucru să fie posibil, e nevoie ca în baza de date să existe absolut toate informațiile necesare raportării – aspect despre care am discutat (necesitatea de a completa coduri fiscale, categorii de TVA, etc.). De asemenea, nomenclatoarele SAF-T (precum codurile InvoiceType menționate mai sus) ar trebui mapate în aplicație. De exemplu, dacă se înregistrează un bon fiscal ca achiziție (factură simplificată), jurnalul de cumpărări ar trebui să îl indice și eventual să permită marcarea tipului de document (bon fiscal cu CUI sau fără, autofactură, etc.). În absența unui modul dedicat, conformitatea SAF-T se reduce la a avea datele pregătite – ceea ce, cum am văzut, necesită completări.Sumara evaluare a conformității implementării actualePuncte forte ale implementării curente:• Schema de date robustă: Există tabele și câmpuri care acoperă majoritatea cerințelor (inclusiv detalii partener, diferite statusuri, tipuri, categorii TVA, legături pentru plăți și chiar un sistem de notă contabilă). Baza de date este concepută să suporte un jurnal de cumpărări complet, doar că unele părți nu sunt încă folosite.• Calcul automat al sumelor și validări: Aplicația calculează corect totalurile și previne erori evidente de introducere (sume care nu bat, lipsa unor date obligatorii), ceea ce contribuie la acuratețea datelor din jurnal[33][34].• Pregătirea pentru scenarii complexe: Parametri precum expenseType, deductibleVat, suport pentru TVA la încasare și valuta denotă că sistemul a fost gândit pentru a gestiona situații variate (achiziții de bunuri vs servicii, TVA parțial deductibil, plăți parțiale, etc.), chiar dacă nu toate sunt finalizate.• Mapare conturi contabile conforme planului de conturi: Conturile 401, 4426, 4427, 4428, 628, 605, 213, 301, 302, 611, etc. sunt toate prezente și alocate corespunzător tranzacțiilor[7][63]. Aceasta asigură că, odată generată nota contabilă, ea va fi în linie cu tratamentele contabile standard (datorii, TVA deductibilă, cheltuieli pe natura lor, imobilizări).Lipsuri și neconformități majore identificate:• Date incomplete despre furnizori în jurnal: codul fiscal, adresa și alte detalii nu sunt salvate la nivelul facturii de cumpărare[18], deși sunt necesare în jurnal[4]. Jurnalul scos direct acum ar omite codurile fiscale ale furnizorilor – neconform cu cerințele art. 319 Cod Fiscal.• Negenerarea automată a notelor contabile: Facturile de achiziție nu sunt înscrise în partida dublă imediat, încălcând principiul înregistrării cronologice complete[20]. Fără legarea la conturi (401, 4426 etc.), evidența contabilă și jurnalul general rămân incomplete.• Lipsa raportului dedicat Jurnal de cumpărări: Nu există o formă de listare/export configurată conform structurii de jurnal (cronologic, cu totaluri pe perioadă, defalcare pe cote). Utilizatorul nu poate obține direct un “Registru Jurnal Cumpărări” în format oficial din aplicație la acest moment.• Neimplementarea tratamentului pentru TVA la încasare (pe achiziții): Deși se păstrează indicatorul și plățile, nu se realizează transferul TVA neexigibil -> deductibil la momentul plății și nu se reflectă acest lucru în jurnal automat. Astfel, o firmă cu TVA la încasare ar deduce incorect TVA dacă s-ar baza doar pe modul actual.• Nedeterminarea diferențelor de curs valutar: Nu se calculează și nu se generează note pentru diferențele de curs la înregistrarea sau plata facturilor în valută[47]. Acest lucru poate duce la neînregistrarea unor venituri/cheltuieli din curs valutar impuse de reglementări (încalcă OMFP 1802/2014 privind evaluarea la finele perioadei și la decontare a elementelor monetare).• TVA parțial deductibil neadresat complet: Dacă o factură are TVA doar parțial deductibil (ex. 50%), aplicația nu are un mecanism dedicat de împărțire – flag-ul fiind doar boolean, se poate marca toată factura ca deductibilă sau nu, dar nu un procent intermediar. Acoperirea acestor cazuri lipsește (de ex., ar trebui posibil fie să marchezi pe fiecare linie dacă TVA-ul e deductibil sau nu, fie să introduci două linii separate pentru partea deductibilă vs nedeductibilă).• Nu se indică separat achizițiile de bunuri pentru revânzare vs bunuri/servicii pentru consum propriu: Din recomandările practice, ar fi utilă separarea jurnalelor (sau coloane distincte) pentru achizițiile de marfă (care afectează adaosul comercial) față de cele de consum/producție. Aplicația nu pare să facă această separare – deși are expenseType, nu știm dacă la nivel de raport va grupa altfel. Actualmente, toate facturile de cumpărare sunt tratate la fel, cu diferența contului contabil folosit la notă, dar nu și la nivel de raportare managerială.În lumina celor de mai sus, se impune un set de îmbunătățiri pentru ca modulul Jurnal de Cumpărări să devină complet conform și practic util pentru utilizatori.Plan detaliat de acțiune pentru implementarea completă a Jurnalului de CumpărăriPentru a aduce aplicația la zi cu toate cerințele legislației românești și bunele practici contabile privind jurnalul de cumpărări, propunem următorii pași de implementare, în ordine logică:1. Salvarea completă a datelor furnizorului la înregistrarea facturii: Extindeți PurchaseJournalService.recordSupplierInvoice astfel încât, după inserarea în invoices, să insereze și o înregistrare în invoice_details. Folosiți informațiile disponibile despre furnizor (posibil din obiectul supplier trecut ca parametru) pentru a completa: partnerName (denumire furnizor), partnerFiscalCode (CUI/CIF), partnerRegistrationNumber (nr. Registrul Comerțului dacă e cazul), partnerAddress, partnerCity, partnerCounty și partnerCountry. De asemenea, setați paymentMethod, paymentDueDays și paymentDueDate pe baza datelor din paymentTerms sau a unor setări implicite. Acest lucru va asigura că fiecare factură de achiziție are atașate toate detaliile de identificare cerute de lege, direct în baza de date[4]. În plus, dacă ulterior partenerul este modificat în baza de date CRM, istoricul pe factură rămâne nemodificat (integritate referențială temporală). Practic, jurnalul scos din invoice_details va conține exact informațiile originale de pe factură, cum este corect.2. Integrarea automată în contabilitate – crearea notelor contabile la validarea facturii: Activați logica de generare a articolului contabil createPurchaseInvoiceEntry. Există două abordări posibile:3. Opțiunea A: Apelați createPurchaseInvoiceEntry imediat în cadrul recordSupplierInvoice, după salvarea facturii și liniilor. Aceasta ar genera nota contabilă instant și ar putea întoarce ID-ul notei. Apoi actualizați invoice-ul cu ledgerEntryId și marcați isValidated=true.4. Opțiunea B (mai controlată): Introduceți un pas de validare a facturii de cumpărare în interfață (similar cu facturile de vânzare). Astfel, utilizatorul poate crea/modifica factura în status „draft” sau „issued”, iar când este sigur că totul e corect, apasă „Validează” – moment în care se apelează serviciul ce face legătura în contabilitate. Această opțiune previne generarea de note contabile pentru facturi incomplete sau eronate, permițând editarea înainte de betonarea în registre. Implementarea ar consta în: adăugarea unui endpoint validateSupplierInvoice în PurchaseJournalController care să seteze isValidated=true, validatedAt=now() și să cheme createPurchaseInvoiceEntry. Nota contabilă creată (structura LedgerEntryData) se va salva prin JournalService iar ID-ul rezultat se pune în invoices.ledgerEntryId.Indiferent de abordare, după acest pas, fiecare factură de cumpărare va avea o notă contabilă asociată în Registrul-Jurnal general, cu conturile debitoare și creditoare conform planului de conturi[8][44]. Acest lucru rezolvă neconformitatea actuală și asigură că bilanțul reflectă la zi datoriile către furnizori și TVA deductibilă. De asemenea, contabilul va putea vedea în modulul de Registru Jurnal tranzacțiile generate, facilitând verificările.Notă: Asigurați-vă că dubla validare este evitată (o factură validată o dată să nu creeze dubluri contabile). Puteți folosi flag-ul isValidated tocmai pentru a preveni reapelarea. În plus, implementați eventual o funcționalitate de stornare/anulare a facturii de achiziție: dacă o factură a fost introdusă greșit și validată, să existe procedură de a o anula (stornare cu notă inversă sau marcarea ei ca „canceled” cu efecte în jurnal).1. Implementarea raportului „Registru Jurnal de Cumpărări”: Dezvoltați un modul de raportare în interfață care să permită utilizatorului generarea jurnalului de cumpărări pe o perioadă selectată (de regulă o lună sau trimestru). Raportul va extrage din tabelele invoices (filtrate pe type='PURCHASE' și companie + perioadă) îmbinate cu invoice_details pentru a obține toate coloanele necesare. În raport vor fi prezentate, pe fiecare linie: Data facturii, Număr factură, Furnizor (nume și CUI), Baza impozabilă, TVA deductibilă, Total factură, eventual și contul de cheltuială asociat sau categoria TVA. Ordinea va fi cronologică după data (și eventual număr). La final, se vor calcula totaluri pe coloana de bază și TVA. Dacă există diferite cote de TVA aplicate, se pot totaliza separat (ex: total bază 19%, TVA 19%; total bază 9%, TVA 9%, etc.), într-un modul de totalizare sub raport, pentru a ajuta verificarea decontului de TVA (decontul D300 cere aceste sumare). Raportul ar trebui să poată fi tipărit și exportat (PDF, Excel).În plus, includeți opțiuni de filtrare și grupare: de exemplu, posibilitatea de a vedea separat achizițiile de bunuri pentru revânzare vs achiziții de bunuri și servicii pentru consum propriu. Acest lucru s-ar putea realiza fie prin generarea a două rapoarte distincte (dacă se bifează "marfă" vs "cheltuieli"), fie într-o singură listă dar cu o coloană/etichetă care indică tipul cheltuielii. Utilizarea câmpului expenseType introdus devine relevantă aici – de pildă, puteți evidenția cu o literă sau culoare diferită liniile unde expenseType=merchandise (achiziții de stocuri comerciale) față de cele cu expenseType=services/utilities etc. Scopul este alinierea cu cerința (din practică) de a ține evidențe separate conform destinației achiziției[64].Nu uitați de implementarea unui număr de ordine al operațiunii (OPțional): puteți decide să adăugați în raport o coloană „Nr. crt.” care să indice indexul liniei în jurnal, resetat la începutul fiecărei perioade de raportare. Deși legea nu impune un asemenea număr de ordine, el apare pe multe modele de jurnale și ajută la referințe (ex: „Factura X este la pozitia 15 în jurnalul lunii”). Acest număr poate fi generat la momentul listării (nu trebuie stocat în DB).Implementând acest raport, aplicația va furniza utilizatorului final produsul finit solicitat de autorități. Asigurați-vă că rapoartele includ toți furnizorii, inclusiv cei neplătitori de TVA (unde coloana de TVA va fi zero) – legea cere evidența tuturor achizițiilor, chiar dacă TVA nu se deduce (pentru că și aceste achiziții pot apărea în Registrul de evidență fiscală sau în calculul altor impozite). De asemenea, pentru facturile cu taxare inversă sau importuri: includeți-le în jurnal la baza lor impozabilă, cu TVA 0 (deductibil 0), dar marcate corespunzător la categorie (ex: tip „taxare inversă” – deși TVA nu e pe factură, bunurile respective dau drept de deducere prin auto-taxare în decont). Aceste fineți trebuie discutate cu departamentul contabil, dar sistemul trebuie să le poată acomoda.1. Mecanismul TVA la încasare pentru achiziții: După ce generarea notelor contabile la facturare este pusă la punct, ajustați această logică pentru cazurile în care compania aplică TVA la încasare (veți ști din companies.use_cash_vat==true și/sau invoice.isCashVAT==true pe factură[65][66]). Regula fiscală: dacă factura de cumpărare este sub incidența TVA la încasare, atunci la înregistrarea facturii TVA nu este deductibil imediat, ci doar la plata parțială sau totală a facturii. Contabil, asta înseamnă că nota generată inițial nu trebuie să conțină debit 4426, ci debit 4428 „TVA neexigibilă”. Apoi, la fiecare plată (integrală sau parțială) înregistrată, trebuie generată o notă contabilă separată care să transfere TVA proportional la 4426.Concret, implementați în recordInvoicePayment (sau într-un serviciu dedicat, ex. CashVatService): dacă factura asociată are isCashVAT=true, calculați cât TVA din factura respectivă devine deductibil prin acea plată. De exemplu, dacă se plătește 50% din suma brută, atunci 50% din TVA devine deductibil. Suma aceasta = vatToDeduct = totalTVA * (paymentAmount / totalInvoiceAmount). Apoi creați o notă contabilă (prin JournalService.createLedgerEntry) de tip transfer TVA, cu: debit 4426 = vatToDeduct, credit 4428 = vatToDeduct. Marcați în invoice_payments câmpul vatAmountTransferred cu suma și vatTransferLedgerId cu id-ul notei create[57]. În acest fel, conturile de TVA vor fi actualizate și se menține trasabilitatea – se poate oricând vedea că la plata X din data Y s-a dedus o anumită parte de TVA (și există nota asociată). La ultima plată a facturii, ar trebui transferat și restul de TVA (până la totalul facturii).În jurnalul de cumpărări, o factură cu TVA la încasare ideal ar trebui reflectată astfel: până nu e plătită, TVA ei nu apare în coloana de „valoare TVA deductibilă”. După plăți, în perioadele respective, TVA dedus ar trebui inclus. Cum implementați asta depinde: fie țineți evidența în jurnal la nivel de factură cu TVA total dar marcat „neexigibil până la plată”, fie o excludeți din totaluri până la momentul plății. O soluție ar fi ca în raportul de jurnal să aveți opțiunea de a rula „pe bază de TVA exigibil” – caz în care filtrați/includeți doar facturile la care isCashVAT=false (deductibile normal) + pentru cele isCashVAT=true luați numai partea plătită (acest lucru e mai complex de prezentat în jurnal per factură). Ca alternativă simplificată: puteți evidenția toate facturile, dar pentru cele la încasare puneți valoare TVA deductibilă zero atâta timp cât nu e plătită, și eventual o notă de subsol că “TVA din facturile marcate cu * se va deduce la plată, conform art. 282 Cod Fiscal”. Apoi, când facturile respective sunt plătite integral, ele vor figura în jurnalul perioadei respective cu TVA deductibil (se poate chiar repeta linia facturii în luna plății cu TVA dedus – însă asta devine complicat).Din perspectivă de implementare, esențial este să asigurați că în contabilitate și evidența TVA, aceste sume sunt tratate corect. Ulterior, modul de raportare poate fi ajustat pentru claritate.Verificați și scenariul invers: Dacă firma nu e în sistem TVA la încasare dar primește facturi de la furnizori care sunt în acest sistem (situație comună – pe factura furnizorului scrie „TVA la încasare”). În acest caz, compania dvs. poate deduce oricum TVA imediat (legea a fost modificată; în trecut se amâna și la beneficiar deducerea, dar din 2019 doar furnizorul amână colectarea, beneficiarul deduce normal). Deci, probabil în aplicație, isCashVAT pe factura de cumpărare se referă la statutul propriei firme, nu la ce scrie pe factură. E corect așa. Doar să fiți atenți să nu confundați – dacă firma nu aplică sistemul, toate facturile se deduc normal, chiar dacă furnizorul lor e în sistem (acel text e informativ în acest caz). În concluzie, implementarea trebuie calibrată să țină cont de companies.use_cash_vat (setat doar pentru cei care aplică regimul) atunci când decide modul de înregistrare a TVA.1. Gestionarea tranzacțiilor în valută – cursul de schimb și diferențe de curs: Îmbunătățiți modul de lucru cu facturile în monedă străină. În momentul înregistrării unei facturi cu currency diferit de RON, aplicația ar trebui să determine automat cursul valutar corect (curs BNR sau alt curs legal din data facturii). Observăm că există o tabelă fx_rates în sistem, care probabil stochează cursurile zilnice[67]. Așadar, modificați recordSupplierInvoice astfel încât, dacă invoiceData.currency != 'RON', să ia cursul din fx_rates pentru acea monedă la data documentului (sau să permită utilizatorului să-l specifice, dar cu preluare automată opțional). Completați câmpul exchangeRate cu valoarea corectă (nu doar 1 cum e default acum)[29]. Acest lucru va asigura că sumele în RON calculate (pentru contabilitate) sunt corecte.Următorul pas: diferențele de curs. Situații de generat diferențe: - Dacă cursul utilizat pe factură diferă de cursul BNR (de exemplu, unele firme înregistrează la cursul din contract, diferit de cel oficial): Conform reglementărilor, în contabilitate tot cursul BNR din ziua operațiunii trebuie folosit pentru înregistrarea datoriilor. Orice diferență față de ce plătești efectiv se duce la curs valutar. Probabil aplicația va dori să folosească direct cursul BNR pentru înregistrare, deci aici nu apar diferențe inițiale. - La data plății, cursul poate diferi de cel de la facturare. Atunci, în momentul înregistrării plății, trebuie calculată diferența: dacă 1 EUR la facturare era 4.9 lei și la plată e 5 lei, iar factura de 100 EUR a fost contabilizată inițial ca 490 lei datorie, când plătesc 100 EUR = 500 lei, în contul 401 voi scoate 490 lei, dar am plătit 500 lei din bancă – diferența de 10 lei este pierdere din curs (665). Inversa ar fi câștig (765) dacă leul se apreciază.Pentru implementare, adăugați logică în recordInvoicePayment astfel: dacă factura e în valută (invoice.currency != RON), preluați din fx_rates cursul valutar la data plății și comparați-l cu invoice.exchangeRate. Calculați suma echivalentă RON a plății la cursul facturii vs cursul plății. Diferența = amount_in_RON_at_payment - amount_in_RON_at_invoice. Apoi creați o notă contabilă de diferență de curs (prin JournalService) cu conturile: 665 „Cheltuieli din diferențe de curs” sau 765 „Venituri din dif. de curs”, în funcție de semn (dacă plata în lei > datoria inițială în lei => pierdere 665 debitat / 401 creditat diferența, dacă plata < datoria inițială => câștig 765 creditat / 401 debitat diferența). În ambele cazuri, 401 (furnizori) trebuie adus la zero pentru factura respectivă. De preferință, însă, pentru simplitate, puteți înregistra diferența astfel: Debit 401, Credit 765 (dacă cursul scade – câștig) sau Debit 665, Credit 401 (dacă cursul crește – pierdere), înainte de înregistrarea efectivă a plății în banca/casa. Apoi plata în sine va stinge 401 la noul sold.Dacă doriți o abordare mai simplă programatic: când se înregistrează plata, puteți direct să stingeți 401 cu suma actualizată la curs nou și diferența să o trimiți în 665/765 într-o singură notă combinată. Dar contabil e mai clar să ai două note: una de diferență de curs, una de plată (512/531 în credit, 401 în debit cu suma actualizată).Anulați TODO din cod: În createPurchaseInvoiceEntry era menționat "TODO: exchange difference"[47]. După implementarea de mai sus, puteți considera acea parte rezolvată la plata facturii. Eventual, pentru reevaluarea la sfârșit de perioadă a datoriilor in valută (dacă sunt neplătite la final de lună/an), se poate adăuga o funcție separată în modulul de contabilitate care reevaluează soldurile contului 401 la cursul BNR de închidere de lună și înregistrează diferențe provizorii, stornate în luna următoare (conform cerințelor de închidere lunară). Aceasta însă e o funcționalitate contabilă generală (nu ține strict de jurnalul de cumpărări, ci de modulul de contabilitate generală).Cu aceste ajustări, aplicația va gestiona complet tranzacțiile valutare aferente achizițiilor: atât evaluarea inițială corectă, cât și impactul fluctuațiilor de curs, evitând astfel inconsistențe și lăsând contabilitatea în conformitate cu OMFP 1802/2014 (paragrafe privind evaluarea elementelor monetare).1. TVA parțial deductibil – scenarii speciale: În extinderea logicii de la punctul 2 (flag deductibleVat), trebuie acoperite cazurile în care doar o parte din TVA este deductibilă. De exemplu, pentru achiziția unui autoturism folosit mixt în firmă (deductibilitate 50% TVA conform Cod Fiscal). Soluția poate fi: permiteți la nivel de linie de factură un câmp % TVA deductibil sau măcar un checkbox „TVA nedeductibil” pe linie. Astfel, utilizatorul poate marca liniile/pozițiile pentru care nu are drept de deducere (sau invers, cele deductibile). La generarea notei contabile, veți avea control mai fin: pentru liniile cu TVA nedeductibil, nu creați poziție de 4426, ci includeți TVA respectiv în cost. Posibil să doriți să creați și un cont separat 635 „Cheltuieli cu TVA nedeductibilă” pentru evidență (unele firme preferă asta decât să includă în costul de achiziție al bunului, mai ales la cheltuieli). Ca alternativă simplă, utilizatorul ar putea sparge manual factura în două linii: una cu 50% din valoare cu TVA deductibil, alta cu restul marcată ca nedeductibil, dar asta e nepractic și predispus la erori.Implementare propusă: extindeți structura invoice_lines cu un boolean isVatDeductible (sau un enum cu valori fully/partial/not deductibile). Dacă există cerința de proporție, se poate adăuga și un numeric deductiblePercent la nivel de linie. Apoi, la generarea notei contabile: - Pentru liniile cu TVA deductibil 100%: debit cont cheltuială = net, debit 4426 = TVA. - Pentru liniile cu TVA 0% deductibil (nedeductibil integral): puteți debita cont cheltuială cu gross (net+TVA) și nu puneți nimic la 4426 (practic TVA devine parte din cost). Sau, debit net în contul de cheltuială obișnuit și TVA în cont 635 – alegeți politicile împreună cu contabilul beneficiar. Important e că 401 tot cu brut va fi creditat, deci trebuie contrapartidă pentru tot. - Pentru liniile cu TVA parțial deductibil (ex. 50%): debit cont cheltuială cu net + partea de TVA nedeductibilă, debit 4426 cu partea de TVA deductibilă. Dacă net=100 lei, TVA=19 lei, 50% deduc => în conturi: 4426 = 9.5 lei (50% din 19), cheltuială = 100 + 9.5 = 109.5 lei, credit 401 = 119.5 lei. Astfel, plătind 119.5 lei, rămâne 9.5 nededus și integrat în cost.Această logică poate fi destul de avansată, dar merită implementată pentru a acoperi fidel toate situațiile. Cel puțin, dacă nu se implementează la nivel de linie, atunci la nivel de factură se poate oferi opțiunea de „TVA deductibil parțial” cu un slider sau introducere procent. Aplicația ar putea atunci intern să separe factura în două calcule.Menținerea conformității: Codul Fiscal prevede clar limitările de deducere (ex. art. 298 limitări la vehicule, protocol etc.). Dacă aplicația poate integra reguli (ex: dacă la expenseType == vehicle să propună 50% automat), ar fi un plus. În orice caz, evidențierea corectă a TVA nedeductibil este necesară și pentru Registrul de evidență fiscală (document separat unde se trec cheltuielile nedeductibile fiscal). Dar aici intrăm în alt registru – de evidență fiscală – care nu e subiectul direct, însă dacă tot colectăm aceste date, le putem refolosi.1. Suport extins pentru raportări fiscale electronice: Odată ce pașii de mai sus sunt implementați și jurnalul conține date complete și corecte, pregătiți module de export pentru diverse declarații:2. Declarația 394: Permiteți extragerea listelor de furnizori cu sumele totale facturate într-un interval, defalcate pe TVA (taxare inversă, bunuri, servicii etc.) conform cerințelor D394. Deja având CUI furnizor și valorile, se poate genera XML-ul sau PDF-ul inteligent cerut de ANAF.3. SAF-T (D406): Cea mai importantă este generarea fișierului SAF-T. Începeți prin a mappa câmpurile din baza de date la structura SAF-T:o Master Files – Suppliers: asigurați-vă că toți furnizorii folosiți au CUI, adresă etc. complet în CRM, pentru a popula secțiunea de master files (listă de furnizori). Puteți extrage din invoice_details direct denumire, CUI etc.o Source Documents – Purchase Invoices: generați elementele XML pentru fiecare factură: includ număr, dată, tip (folosiți invoices.type și eventual un nou câmp dacă trebuie distins bon fiscal vs factură; de exemplu, dacă invoiceNumber conține „BON” sau alt indicator, s-ar putea marca alt tip), moneda, sumele, precum și referințe la plăți (SAF-T cere și legătura la plăți efectuate – de ex. dacă factura e plătită sau nu, și prin ce document). De aceea, câmpurile din invoice_payments vor fi utile. Verificați în schema SAF-T secțiunea 4.2 și 4.3 care atribute sunt obligatorii. De exemplu, trebuie indicat VAT rate, VAT amount, deductibility, eventual codul taxei (în Romania poate nu e nevoie de cod pentru că se deduce implicit).o General Ledger Entries: fiindcă ați implementat notele contabile, secțiunea de Ledger din SAF-T poate fi populată (nu era explicit cerut de utilizator, dar e parte integrantă a fișierului). Astfel, declarația va conține atât jurnalul general cât și jurnalele de cumpărări/vânzări, ceea ce asigură coerență (ANAF va putea vedea că facturile din Purchase Invoices au corespondent în Ledger Entries pe conturile 401/4426/etc.).Acest pas este complex și poate necesita un proiect separat dedicat raportării SAF-T. Prioritar este însă ca datele să fie acolo – de aceea am insistat pe popularea codurilor fiscale, conturilor, categoriilor. Odată datele disponibile, generarea fișierului SAF-T este tehnică (mapare XML), nu conceptuală. Până la momentul obligativității pentru toate firmele (micii contribuabili din 2025[68]), aplicația ar trebui să ofere această facilitate pentru a rămâne utilă utilizatorilor.1. Testare și aliniere finală la reglementări: După implementarea tuturor celor de mai sus, efectuați un audit final împreună cu un expert contabil/fiscal:2. Verificați că jurnalul de cumpărări generat lunar cu aplicația conține toate elementele cerute și ar trece cu succes printr-un control fiscal (conținut, formă – de ex. semnături, dacă se listează, conform OMFP 2634/2015). Poate includeți și posibilitatea de a semna electronic raportul, având în vedere tendința de digitalizare.3. Asigurați-vă că totalurile de TVA deductibil din jurnal bat exact cu cele din Decontul de TVA (D300) generat de firmă. Orice discrepanță ar indica fie omisiuni în jurnal, fie calcul greșit de deducere.4. Simulați cazuri particulare: factură în valută cu plată ulterioară – vedeți că se generează corect diferența de curs; factură cu TVA la încasare – verificați că până la plată nu apare TVA deductibil, după plată apare; factură cu TVA nedeductibil – asigurați-vă că nu se alocă nimic în 4426 pentru partea respectivă etc.5. Țineți cont de normele metodologice la Codul Fiscal și alte ordine (ex. dacă apar modificări de cote TVA sau noi cerințe de raportare, ex. e-Factura B2B, etc., jurnalul ar trebui adaptat să preia identificatori specifici dacă va fi cazul).Prin implementarea acestor pași, modulul Registru Jurnal de Cumpărări al aplicației va deveni complet raliat la toate standardele românești în vigoare la zi: va permite evidența corectă și completă a tuturor achizițiilor cu toate detaliile cerute (conform OMFP 2634/2015 și Cod Fiscal), va integra automat aceste operațiuni în contabilitate (respectând Planul de conturi – OMFP 1802/2014), va gestiona particularitățile de TVA (taxare inversă, TVA la încasare, deductibilitate limitată) și de valută, și va putea genera rapoarte și declarații (SAF-T D406, D394, decont TVA) conforme. Acest upgrade va îmbunătăți substanțial atât conformitatea legală, cât și eficiența utilizatorilor (eliminând operațiunile manuale paralele).Surse: Codul Fiscal art. 319 privind evidența operațiunilor în scop de TVA[2]; OMFP 2634/2015 – Nomenclator documente financiar-contabile; OMFP 1802/2014 – Reglementări contabile și plan de conturi; Ghid ANAF SAF-T D406[13]; Analiza implementării actuale realizată pe baza codului sursă GeniusERP[18][42] și bune practici contabile.[1] [4] [11] [64] Tot ce trebuie să știi despre jurnalul de cumpărări | Facturis.rohttps://facturis.ro/blog/legislatie-facturare-si-stocuri/tot-ce-trebuie-sa-stii-despre-jurnalul-de-cumparari/[2] [3] [5] [9] [10] Documentele contabile esențiale pentru orice firmă: tipuri, rol și obligații legale - TaxDome bloghttps://blog.taxdome.com/ro/documentele-contabile/[6] ANEXA 2https://static.anaf.ro/static/10/Anaf/transparenta/ANEXA2_TVA.htm[7] [8] [16] [17] [18] [20] [28] [29] [30] [31] [32] [33] [34] [35] [36] [37] [38] [39] [40] [41] [42] [43] [44] [45] [46] [47] [48] [60] [61] [62] [63] purchase-journal.service.tshttps://github.com/neacisu/GeniusERP_V_5_0_1/blob/01efdb93407d5f8ff28743e17a1131eb83fb4a2a/server/modules/accounting/services/purchase-journal.service.ts[12] [14] [15] Jurnalul de cumparari in SAF-T. Ce informatii trebuie sa se declare in D406https://contabilul.manager.ro/a/27434/jurnalul-de-cumparari-in-saf-t-ce-informatii-trebuie-sa-se-declare-in-d406.html[13] [68] SAF-T 2025: Cine trebuie și cine nu trebuie să depună Declarația 406https://nextup.ro/articole/saf-t-2025-cine-trebuie-si-cine-nu-trebuie-sa-depuna-declaratia-406/[19] [21] [23] [26] [27] [51] [52] [55] [56] [57] [67] schema.tshttps://github.com/neacisu/GeniusERP_V_5_0_1/blob/01efdb93407d5f8ff28743e17a1131eb83fb4a2a/shared/schema.ts[22] [24] [25] [58] [59] [65] [66] sales-journal-vat-implementation.mdhttps://github.com/neacisu/GeniusERP_V_5_0_1/blob/01efdb93407d5f8ff28743e17a1131eb83fb4a2a/documentation/sales-journal-vat-implementation.md[49] [50] [53] [54] purchase-journal.controller.tshttps://github.com/neacisu/GeniusERP_V_5_0_1/blob/01efdb93407d5f8ff28743e17a1131eb83fb4a2a/server/modules/accounting/controllers/purchase-journal.controller.ts
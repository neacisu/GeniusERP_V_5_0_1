ðŸ“¦ Prompt: Implement Accounting Note (NotÄƒ ContabilÄƒ) Generation via Document Validation System

Context:  
Invoices already follow strict lifecycle (`Draft`, `Issued`, `Sent`, `Canceled`) and allocation rules. Now we need to implement a **validation system** in the `invoicing` module that:
- Locks the invoice upon validation
- Automatically generates a NotÄƒ ContabilÄƒ in `accounting` module
- Allows safe devalidation (with strict checks)
- Ensures compliance with Romanian standards

ðŸ§± Directory Structure:
- Invoices module: `server/modules/invoicing`
- Accounting module: `server/modules/accounting`

âœ… Objective:
Implement invoice validation with automatic ledger entry (RAS-compliant double-entry posting).

ðŸŽ¯ Agent Prompt:

"Extend GeniusERP v.2 with invoice validation and accounting posting:

1. **Schema updates:**
   - In `invoices` table, add:
     ```ts
     is_validated: boolean (default: false)
     validated_at: timestamp | null
     ```

2. **Validation logic:**
   - Location: `server/modules/invoicing/services/validate-invoice.service.ts`
   - Logic:
     - Allow only if `status === 'Issued'` and `is_validated === false`
     - Generate a new accounting journal entry via:
       ```ts
       await LedgerService.create({
         source: 'invoice',
         source_id: invoice.id,
         company_id: invoice.company_id,
         date: invoice.issued_at,
         lines: [
           { account_id: '4111', debit: invoice.total, label: 'Client' },
           { account_id: '707', credit: invoice.subtotal, label: 'Sales' },
           { account_id: '4427', credit: invoice.vat, label: 'TVA colectatÄƒ' }
         ]
       })
       ```
     - Mark `is_validated = true`, set `validated_at = now()`

3. **Devalidation logic:**
   - Location: `server/modules/invoicing/services/devalidate-invoice.service.ts`
   - Rules:
     - Allow only if `is_validated = true` and `status === 'Issued'`
     - Remove `ledger` + `ledger_lines` entries linked to `invoice.id`
     - Reset `is_validated = false`, `validated_at = null`
     - Add optional check: if invoice has payments â†’ show confirmation & delete those

4. **Expose routes:**
   - POST `/invoicing/:id/validate`  
     â†’ maps to `validate-invoice.route.ts`
   - POST `/invoicing/:id/devalidate`  
     â†’ maps to `devalidate-invoice.route.ts`

5. **Lock logic:**
   - Prevent edit/delete in UI/API if `is_validated === true`
   - In delete logic, allow delete only if:
     - `status = 'Draft' && !is_validated`
     - OR `status = 'Issued' && !is_validated && last issued`

6. **Audit Log:**
   - On both validate and devalidate, push to `audit_log` via `AuditService.log(...)`

7. **Icon/UI Status:**
   - Reflect validated state via color/icon badge (first column)
   - Disable/enable buttons based on state (`validate`, `devalidate`)

8. **Prepare generic validator:**
   - Create utility: `server/modules/accounting/services/validate-document.ts`
   - Accepts: `entity_type`, `entity_id`, `lines`, `company_id`, `date`

Run `npm run build`, and test both routes with mocked invoice records."

```
Step 25: Define Invoicing Model (Drizzle ORM + Romanian Compliance)

🎯 Description:  
Define the `invoices` table using **Drizzle ORM**, with full support for Romanian invoicing regulations and e-Factura compliance.  
Invoices must have:
- Series (e.g. `FDI25`) and incremental Number (e.g. `000001`)  
- Strict status lifecycle: `Draft`, `Issued`, `Sent`, `Canceled`  
- Series + number must be unique and **only allocated at status = Issued**
- Deletion only allowed for:
  - Draft invoices
  - Last issued invoice (if not Sent or Canceled), releasing series/number
- Multi-currency support with default to `RON`

📦 Technologies:
- Backend: Express
- ORM: Drizzle
- Database: PostgreSQL (Neon)
- Structure: NX monorepo, modular
- File max: ≤150 LOC

🧱 Dependencies:
- Step 8: Initial schema setup complete

⚙️ Instructions:

1. ✅ Create the schema file:
```
apps/api/src/modules/invoicing/schema/invoice.schema.ts
```

2. ✅ Add Drizzle model:
```ts
import {
  pgTable,
  uuid,
  text,
  numeric,
  timestamp,
  index,
  varchar,
  integer,
  pgEnum,
  unique,
} from 'drizzle-orm/pg-core';

export const invoiceStatus = pgEnum('invoice_status', ['draft', 'issued', 'sent', 'canceled']);

export const invoices = pgTable('invoices', {
  id: uuid('id').primaryKey().defaultRandom(),
  company_id: uuid('company_id').notNull(),
  franchise_id: uuid('franchise_id'),
  series: varchar('series', { length: 8 }),
  number: integer('number'), // Allocated only when status = issued
  status: invoiceStatus('status').default('draft').notNull(),
  total_amount: numeric('total_amount', { precision: 12, scale: 2 }).notNull(),
  currency: varchar('currency', { length: 5 }).default('RON').notNull(),
  version: integer('version').default(1).notNull(),
  created_at: timestamp('created_at').defaultNow(),
  updated_at: timestamp('updated_at').defaultNow(),
}, (table) => ({
  companyIndex: index('invoice_company_idx').on(table.company_id, table.franchise_id, table.created_at),
  uniqueSeriesNumber: unique('invoice_series_number_unique').on(table.series, table.number),
}));
```

3. ✅ Add to global schema index:
```
apps/api/src/db/schema/index.ts
```
```ts
export * from '../../modules/invoicing/schema/invoice.schema';
```

4. ✅ Generate and apply migration:
```bash
npx drizzle-kit generate:pg --out drizzle/migrations --name create-invoices
npx drizzle-kit push:pg
```

🧪 Validation:
- Table `invoices` exists in Neon
- Unique constraint on `(series, number)`
- Status column uses proper enum
- Currency + totals properly typed
- Manual insertions of Issued/Deleted invoice should enforce lifecycle

📎 Notes:
- You will later create logic in `InvoiceService` to allocate series/number only at `Issued`
- Add soft deletion flag if needed for audit
- Consider `deleted_at` for future immutable audit trails
```
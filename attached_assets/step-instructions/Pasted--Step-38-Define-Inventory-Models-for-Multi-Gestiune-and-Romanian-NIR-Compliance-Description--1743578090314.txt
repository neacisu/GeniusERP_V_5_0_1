```
Step 38: Define Inventory Models for Multi-Gestiune and Romanian NIR Compliance

🎯 Description:  
Define Drizzle ORM models to support inventory operations in accordance with **Standardele Românești privind recepția mărfurilor** and internal GeniusERP logic.  
The inventory system must support **4 distinct types of "Gestiune"** (inventory location types), each with different rules for NIR (Notă de Intrare Receptie):

1. 🏢 **Depozit** – NIR at purchase price (without VAT)
2. 🛒 **Magazin** – NIR at sale price (with markup and VAT)
3. 📦 **Custodie** – Goods received in custody from supplier, tracked via Custody NIR
4. 🔁 **Transfer între gestiuni** – Goods sent between locations generate:
   - Auto-generated **Aviz de însoțire**
   - Reception with **NIR**
   - Automatic cross-validation
   - Tranzit stock held in a virtual `Gestiune tip transfer` until accepted

📦 Technologies:
- ORM: Drizzle
- DB: PostgreSQL (Neon)
- Backend: Express (modular NX)

🧱 Dependencies:
- Step 8: Base schema defined

⚙️ Instructions:

1. ✅ Create schema file:
```
apps/api/src/modules/inventory/schema/inventory.schema.ts
```

2. ✅ Define models:
```ts
import {
  pgTable,
  uuid,
  varchar,
  integer,
  timestamp,
  pgEnum,
  index,
  boolean,
  date,
} from 'drizzle-orm/pg-core';

export const gestiune_type = pgEnum('gestiune_type', ['depozit', 'magazin', 'custodie', 'transfer']);

export const warehouses = pgTable('warehouses', {
  id: uuid('id').primaryKey().defaultRandom(),
  company_id: uuid('company_id').notNull(),
  franchise_id: uuid('franchise_id'),
  name: varchar('name', { length: 100 }).notNull(),
  location: varchar('location', { length: 150 }),
  type: gestiune_type('type').notNull(),
  created_at: timestamp('created_at').defaultNow(),
  updated_at: timestamp('updated_at').defaultNow(),
}, (table) => ({
  warehouseIndex: index('warehouse_idx').on(table.company_id, table.franchise_id),
}));

export const stocks = pgTable('stocks', {
  id: uuid('id').primaryKey().defaultRandom(),
  company_id: uuid('company_id').notNull(),
  franchise_id: uuid('franchise_id'),
  sku: varchar('sku', { length: 50 }).notNull(),
  quantity: integer('quantity').notNull(),
  batch_no: varchar('batch_no', { length: 50 }),
  expiry_date: date('expiry_date'),
  warehouse_id: uuid('warehouse_id').notNull(),
  created_at: timestamp('created_at').defaultNow(),
  updated_at: timestamp('updated_at').defaultNow(),
}, (table) => ({
  stockIndex: index('stock_idx').on(table.company_id, table.franchise_id, table.warehouse_id, table.created_at),
}));

export const purchase_orders = pgTable('purchase_orders', {
  id: uuid('id').primaryKey().defaultRandom(),
  company_id: uuid('company_id').notNull(),
  franchise_id: uuid('franchise_id'),
  sku: varchar('sku', { length: 50 }).notNull(),
  quantity: integer('quantity').notNull(),
  status: varchar('status', { length: 20 }).default('pending'),
  warehouse_id: uuid('warehouse_id').notNull(),
  is_custody: boolean('is_custody').default(false),
  created_at: timestamp('created_at').defaultNow(),
  updated_at: timestamp('updated_at').defaultNow(),
}, (table) => ({
  poIndex: index('purchase_order_idx').on(table.company_id, table.franchise_id, table.created_at),
}));
```

3. ✅ Export models:
```ts
// apps/api/src/db/schema/index.ts
export * from '../../modules/inventory/schema/inventory.schema';
```

4. ✅ Generate + apply migration:
```bash
npx drizzle-kit generate:pg --out drizzle/migrations --name create-inventory
npx drizzle-kit push:pg
```

🧪 Validation:
- Warehouse types: depozit, magazin, custodie, transfer
- Purchase orders can flag `is_custody`
- Stock movement can later be filtered by gestiune type
- Transfer logic will be implemented using Aviz + intermediate stock in `transfer` gestiune

📎 Notes:
- You will later implement:
  - `nir_entries` table (NIR head and line model)
  - `aviz_entries` table for transfer slips
  - Auto validation when transfer is received
  - Split logic in separate services per gestiune type
```
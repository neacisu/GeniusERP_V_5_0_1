```
Step 29: Create ExchangeRateService (BNR XML + Local DB)

🎯 Description:  
Implement `ExchangeRateService` to convert amounts between **RON ↔ other currencies** using the official BNR rates saved in the local database.  
This service supports accurate, real-time conversion required for invoicing, e-factura, and multi-currency reporting (Section 2.2.2.1).  
Rates are fetched daily via cron (Step 28) and read from the `fx_rates` table.  
No external API/token is used — only local DB and BNR.

📦 Technologies:
- Backend: Express (TypeScript)
- ORM: Drizzle
- DB: PostgreSQL (Neon)
- Source: `fx_rates` table (synced daily from BNR)

🧱 Dependencies:
- Step 27: Axios installed
- Step 28: Cron job syncs daily BNR rates into DB

⚙️ Instructions:

1. ✅ Create the service file:
```
apps/api/src/modules/currency/services/exchange-rate.service.ts
```

2. ✅ Add the following implementation:
```ts
import { drizzleClient } from '@/common/drizzle/drizzle.client';
import { fx_rates } from '../schema/fx-rate.schema';
import { eq } from 'drizzle-orm';

export class ExchangeRateService {
  static async convert(amount: number, from: string, to: string): Promise<number> {
    if (from === to) return amount;

    const today = new Date();
    const rateFrom = from === 'RON' ? 1 : await this.getRate(from, today);
    const rateTo = to === 'RON' ? 1 : await this.getRate(to, today);

    if (!rateFrom || !rateTo) {
      throw new Error(`Missing exchange rate for ${from} or ${to}`);
    }

    const ronAmount = from === 'RON' ? amount : amount * rateFrom;
    const converted = to === 'RON' ? ronAmount : ronAmount / rateTo;

    return parseFloat(converted.toFixed(2));
  }

  static async getRate(currency: string, date: Date): Promise<number> {
    const result = await drizzleClient
      .select({ rate: fx_rates.rate })
      .from(fx_rates)
      .where(eq(fx_rates.currency, currency))
      .limit(1);

    return parseFloat(result[0]?.rate || '0');
  }
}
```

🧪 Validation:
- Convert 100 RON → EUR returns correct value using latest BNR rate
- Convert 50 EUR → RON works accurately
- Log errors when currency not found

📎 Notes:
- Only conversions supported: `RON → X` and `X → RON`
- Do not support X → Y (non-RON base)
- Always use the **most recent rate available**
- You can enhance to cache recent rates in Redis later
```
```
Step 37: Create or Upgrade Documents Module (Enterprise Archive, OCR, Signing, Registry)

🎯 Description:  
Ask the agent to first **search for an existing documents module** before generating a new one.  
The `documents` module will be a **comprehensive enterprise-grade system** that centralizes all document workflows in GeniusERP v.2.  
It must support:
- OCR & intelligent document parsing
- Full archive and versioning system
- PandaDoc-based eSignature flows
- Incoming/outgoing registry (Registru intrări/ieșiri documente)
- Custom ERP templates for invoices, contracts, orders, etc.
- Embedded editor support
- Unique document indexing and auto-numbering
- Text + semantic content search (for OCR/metadata)
- Email & file attachments routing into archive

📦 Technologies:
- Backend: Express (modular NX structure)
- DB: PostgreSQL (Drizzle ORM)
- OCR: to be implemented in future steps
- Signing: PandaDoc via Axios
- Secrets: PANDADOC_API_KEY

🧱 Dependencies:
- Step 36: SignDocumentService ready
- Step 34: DB tables (`documents`, `document_versions`) migrated

⚙️ Instructions:

1. ✅ Verify existence of:
```
apps/api/src/modules/documents/documents.module.ts
```

- If it exists → upgrade to include additional services & architecture
- If not → create the module with proper structure

2. ✅ Create a base version:
```ts
// apps/api/src/modules/documents/documents.module.ts
import { SignDocumentService } from './services/sign-document.service';
import { ExchangeRateService } from '@/modules/currency/services/exchange-rate.service';
import { CreateDocumentService } from './services/create-document.service';

export class DocumentsModule {
  static register() {
    return {
      services: [
        SignDocumentService,
        CreateDocumentService,
        ExchangeRateService, // if needed in templates
        // (future) OCRService, DocumentRegistryService, TemplateService
      ],
    };
  }
}
```

3. ✅ Register in `apps/api/src/app.ts`:
```ts
import { DocumentsModule } from '@/modules/documents/documents.module';
const { services } = DocumentsModule.register();
```

🧪 Validation:
- All core services (signing, creation) accessible
- Module loads with no circular dependencies
- Cron or scheduler for registry/email/OCR can be added incrementally

📎 Notes:
- Structure this module into folders:
```
/schema      → Drizzle tables
/services    → OCR, Sign, Create, Registry, Search
/controllers → API endpoints (upload, sign, archive, etc.)
/routes      → POST /archive, /sign, /ocr, etc.
/templates   → Stored ERP document templates
```

- Avoid any logic in the controller — fully delegate to services
- Max 100–150 LOC per file; respect granular principle throughout
```
```
Step 28: Integrate BNR Official Exchange Rates (XML) with Daily Cron Sync

🎯 Description:  
Integrate the official exchange rate source from **BNR** (`https://www.bnr.ro/nbrfxrates.xml`) for multi-currency invoicing support.  
Configure the system to fetch and store **daily FX rates** in the local database, and import rates from DB for use in invoice calculations.  
This replaces the need for third-party APIs like `exchangeratesapi.io` and aligns with Romanian financial standards (Section 2.2.2.1).

📦 Technologies:
- Backend: Express (TypeScript, NX)
- HTTP: Axios
- Scheduler: `node-cron`
- ORM: Drizzle
- Database: PostgreSQL (Neon)
- Source: BNR XML daily feed

🧱 Dependencies:
- Step 2: Core dependencies installed
- Step 27: Axios installed

⚙️ Instructions:

1. ✅ Install `node-cron` for scheduling:
```bash
npm install node-cron --save
```

2. ✅ Create cron job:
```
apps/api/src/modules/currency/jobs/fetch-bnr-rates.job.ts
```

3. ✅ Sample BNR cron job:
```ts
import cron from 'node-cron';
import axios from 'axios';
import { parseStringPromise } from 'xml2js';
import { drizzleClient } from '@/common/drizzle/drizzle.client';
import { fx_rates } from '../schema/fx-rate.schema';

export function scheduleBNRRateSync() {
  cron.schedule('30 14 * * *', async () => {
    try {
      console.log('[BNR FX] Fetching daily exchange rates from BNR...');
      const xml = await axios.get('https://www.bnr.ro/nbrfxrates.xml');
      const parsed = await parseStringPromise(xml.data);
      const rates = parsed.DataSet.Body[0].Cube[0].Rate;

      for (const rate of rates) {
        await drizzleClient.insert(fx_rates).values({
          currency: rate.$.currency,
          rate: parseFloat(rate._),
          date: new Date(),
        });
      }

      console.log('[BNR FX] Exchange rates updated successfully.');
    } catch (err) {
      console.error('[BNR FX] Failed to update exchange rates:', err);
    }
  }, {
    timezone: 'Europe/Bucharest',
  });
}
```

4. ✅ Call the scheduler in app bootstrap:
```ts
import { scheduleBNRRateSync } from '@/modules/currency/jobs/fetch-bnr-rates.job';
scheduleBNRRateSync();
```

5. ✅ Create schema table `fx_rates`:
```
apps/api/src/modules/currency/schema/fx-rate.schema.ts
```
```ts
import { pgTable, varchar, numeric, timestamp } from 'drizzle-orm/pg-core';

export const fx_rates = pgTable('fx_rates', {
  currency: varchar('currency', { length: 5 }).primaryKey(),
  rate: numeric('rate', { precision: 10, scale: 4 }).notNull(),
  date: timestamp('date').notNull(),
});
```

🧪 Validation:
- At 14:30 Romania time (EET), new rates are pulled from BNR and saved to DB
- Rates are imported and used in invoice generation logic
- Test via manual `curl` or cron override

📎 Notes:
- Do **not** fetch from unofficial providers
- No API token needed — source is public from BNR
- Always use the **latest available rate** from DB when issuing multi-currency invoices
```
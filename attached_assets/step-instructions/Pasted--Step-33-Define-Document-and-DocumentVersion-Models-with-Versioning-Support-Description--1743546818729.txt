```
Step 33: Define Document and DocumentVersion Models (with Versioning Support)

🎯 Description:  
Create two Drizzle ORM models: `documents` and `document_versions`, to enable document archiving and version control in GeniusERP v.2 (see Section 2.2.2.2).  
Each document supports metadata (file path, type, optional OCR), and stores one or more content versions (immutable, historical).

📦 Technologies:
- ORM: Drizzle (PostgreSQL)
- Backend: Express (NX monorepo)
- Language: TypeScript

🧱 Dependencies:
- Step 8: Core schema and DB integration completed

⚙️ Instructions:

1. ✅ Create schema file:
```
apps/api/src/modules/documents/schema/document.schema.ts
```

2. ✅ Define `documents` and `document_versions` tables:
```ts
import {
  pgTable,
  uuid,
  text,
  varchar,
  timestamp,
  index,
  integer,
} from 'drizzle-orm/pg-core';

export const documents = pgTable('documents', {
  id: uuid('id').primaryKey().defaultRandom(),
  company_id: uuid('company_id').notNull(),
  franchise_id: uuid('franchise_id'),
  file_path: text('file_path').notNull(),
  type: varchar('type', { length: 50 }).notNull(),
  ocr_text: text('ocr_text'),
  created_at: timestamp('created_at').defaultNow(),
  updated_at: timestamp('updated_at').defaultNow(),
}, (table) => ({
  orgIndex: index('documents_idx').on(table.company_id, table.franchise_id, table.created_at),
}));

export const document_versions = pgTable('document_versions', {
  id: uuid('id').primaryKey().defaultRandom(),
  document_id: uuid('document_id').notNull(),
  content: text('content').notNull(),
  version: integer('version').default(1),
  created_at: timestamp('created_at').defaultNow(),
}, (table) => ({
  docVersionIndex: index('document_versions_idx').on(table.document_id, table.created_at),
}));
```

3. ✅ Export schema in central index:
```
apps/api/src/db/schema/index.ts
```
```ts
export * from '../../modules/documents/schema/document.schema';
```

4. ✅ Generate & apply migration:
```bash
npx drizzle-kit generate:pg --out drizzle/migrations --name create-documents
npx drizzle-kit push:pg
```

🧪 Validation:
- Tables `documents` and `document_versions` created in Neon
- Each document can have multiple versions
- All writes to `document_versions` should be immutable (append-only)

📎 Notes:
- Use `document_id` as foreign key (1:N relationship)
- Store OCR text in base table, versioned content in version table
- Add access control & file validation in service layer
```
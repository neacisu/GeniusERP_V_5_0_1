```markdown
### üîÑ Step 86: Create `CheckStockLevelsService` for Inventory Monitoring (Express + Drizzle + BullMQ)

**üìå Description:**  
Design a `CheckStockLevelsService` to monitor stock quantities and enqueue alerts when items fall below their defined minimum thresholds. This is essential for low-stock notifications and warehouse replenishment automation (Section 2.2.2.3). The service should use BullMQ for async task processing.

**üìé Dependencies:**  
- ‚úÖ Step 40: `InventoryModule` is created  
- ‚úÖ Step 11: BullMQ + Redis installed and functional  
- ‚öôÔ∏è Express + Drizzle ORM used throughout

---

### ü§ñ Agent Instructions:

1. **Check first:**  
   - Does `CheckStockLevelsService` already exist under `server/modules/inventory/`?  
   - Is there any existing low-stock check logic in services or jobs?

2. **If not, proceed to:**  
   - Add a `minimum_stock` field to the `products` table in the Drizzle schema (if not defined)
   - Create the new `CheckStockLevelsService`
   - Update the `InventoryModule` to register this service

---

### üõ†Ô∏è Drizzle Schema Update

Ensure `products` table includes `minimum_stock`:

```ts
// schema/products.ts
import { integer, pgTable, text, uuid, timestamp } from "drizzle-orm/pg-core";

export const products = pgTable("products", {
  id: uuid("id").primaryKey().defaultRandom(),
  company_id: text("company_id").notNull(),
  franchise_id: text("franchise_id").notNull(),
  sku: text("sku").notNull(),
  name: text("name").notNull(),
  minimum_stock: integer("minimum_stock").default(10), // ‚úÖ Add this
  created_at: timestamp("created_at").defaultNow(),
  updated_at: timestamp("updated_at").defaultNow(),
});
```

Run a migration after this change.

---

### üìÑ Create File

```bash
server/modules/inventory/check-stock-levels.service.ts
```

---

### üí° Service Implementation (Drizzle + BullMQ)

```ts
import { stock, products } from "../../schema";
import { db } from "../../core/db";
import { eq, and, lt } from "drizzle-orm";
import { Queue } from "bullmq";

export class CheckStockLevelsService {
  constructor(private queue: Queue) {}

  async checkLevels(franchiseId: string) {
    const lowStocks = await db
      .select({
        sku: stock.sku,
        quantity: stock.quantity,
        minimum: products.minimum_stock,
        warehouseId: stock.warehouse_id,
      })
      .from(stock)
      .innerJoin(products, eq(stock.sku, products.sku))
      .where(
        and(
          eq(stock.franchise_id, franchiseId),
          lt(stock.quantity, products.minimum_stock)
        )
      );

    for (const entry of lowStocks) {
      await this.queue.add("low-stock-alert", {
        sku: entry.sku,
        quantity: entry.quantity,
        warehouseId: entry.warehouseId,
      });
    }

    return lowStocks;
  }
}
```

---

### üß© Update Inventory Module

Ensure `CheckStockLevelsService` is registered:

```ts
import { CheckStockLevelsService } from "./check-stock-levels.service";

export const InventoryModule = {
  providers: [
    CheckStockLevelsService,
    // other inventory services
  ],
};
```

---

### ‚úÖ Usage Example

```ts
const check = new CheckStockLevelsService(bullQueue);
await check.checkLevels("franchise-uuid");
```

---

This enables GeniusERP to automate stock alerting, integrate with future supply chain planning features, and maintain lean inventory management in real-time using Redis queues and Drizzle-typed SQL queries.
```
```
Step 31: Create CreateInvoiceService (with Currency Conversion via BNR Rates)

üéØ Description:  
Implement `CreateInvoiceService` in the `invoices` module to handle invoice creation logic, including **currency conversion** using `ExchangeRateService` (see Section 2.2.2.1).  
The service should:
- Accept invoice input in any currency
- Convert to target currency if needed (RON ‚Üî foreign currency)
- Persist the invoice in the `invoices` table
- Default to status `draft`, version `1`, and use Drizzle ORM

üì¶ Technologies:
- Backend: Express
- ORM: Drizzle
- Monorepo: NX
- Currency conversion: via BNR rates in local DB

üß± Dependencies:
- Step 29: `ExchangeRateService` implemented
- Step 30: `InvoicesModule` scaffolded

‚öôÔ∏è Instructions:

1. ‚úÖ Create service file:
```
apps/api/src/modules/invoices/services/create-invoice.service.ts
```

2. ‚úÖ Add the following implementation:
```ts
import { drizzleClient } from '@/common/drizzle/drizzle.client';
import { invoices } from '../schema/invoice.schema';
import { ExchangeRateService } from '@/modules/currency/services/exchange-rate.service';
import { CreateInvoiceInput } from '../types/invoice.input';
import { invoice_status } from '../types/invoice-status.enum';

export class CreateInvoiceService {
  static async execute(input: CreateInvoiceInput) {
    const {
      company_id,
      franchise_id,
      currency = 'RON',
      convert_to,
      amount,
    } = input;

    let finalAmount = amount;

    if (convert_to && convert_to !== currency) {
      finalAmount = await ExchangeRateService.convert(amount, currency, convert_to);
    }

    const result = await drizzleClient.insert(invoices).values({
      company_id,
      franchise_id,
      currency: convert_to || currency,
      total_amount: finalAmount,
      status: invoice_status.draft,
      version: 1,
      created_at: new Date(),
      updated_at: new Date(),
    });

    return result;
  }
}
```

3. ‚úÖ Define input & enums:
- `apps/api/src/modules/invoices/types/invoice.input.ts`
```ts
export interface CreateInvoiceInput {
  company_id: string;
  franchise_id?: string;
  currency?: string;
  convert_to?: string;
  amount: number;
}
```

- `apps/api/src/modules/invoices/types/invoice-status.enum.ts`
```ts
export enum invoice_status {
  draft = 'draft',
  issued = 'issued',
  sent = 'sent',
  canceled = 'canceled',
}
```

üß™ Validation:
- Create invoice in EUR ‚Üí stores converted RON value
- Create invoice in RON ‚Üí uses base value
- Logs conversion flow and Drizzle insert

üìé Notes:
- Series/number is not assigned here ‚Äî done only when issuing
- This is step 1 of the lifecycle (Draft only)
- Extend with validation + audit logging later
```
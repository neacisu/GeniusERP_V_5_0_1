```
Step 18: Create AuthService (Drizzle + JWT)

üéØ Description:  
Implement an `AuthService` in NestJS to handle user authentication using **Drizzle** and **JWT**.  
It will validate credentials, hash passwords with bcrypt, and issue signed JWT tokens.  
This follows the RBAC schema defined in Step 14 and uses the `users` table for login.

üß± Dependencies:  
- Step 15: Auth models migrated via Drizzle  
- Step 16: JWT packages installed  
- Step 17: JWT_SECRET configured

‚öôÔ∏è Actions:

1. ‚úÖ Install bcrypt:
```bash
npm install bcrypt @types/bcrypt --save
```

2. ‚úÖ Create the file:
```
/src/common/services/auth.service.ts
```

3. ‚úÖ Content of `auth.service.ts` (adapted for Drizzle):

```ts
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import * as bcrypt from 'bcrypt';
import { DrizzleService } from '../drizzle/drizzle.service';
import { users } from '../../../db/schema/auth';
import { eq } from 'drizzle-orm';

@Injectable()
export class AuthService {
  constructor(
    private readonly drizzle: DrizzleService,
    private readonly jwtService: JwtService,
  ) {}

  async login(email: string, password: string) {
    const result = await this.drizzle.db
      .select()
      .from(users)
      .where(eq(users.email, email));

    const user = result[0];

    if (!user || !(await bcrypt.compare(password, user.password))) {
      throw new UnauthorizedException('Invalid credentials');
    }

    const payload = {
      userId: user.id,
      roles: [], // TODO: Fetch user roles via join
    };

    const token = this.jwtService.sign(payload);
    return { token };
  }
}
```

üß™ Validation:
- Run `npm run build` ‚Äî ensure no type errors
- Add a temporary controller for testing `AuthService.login()`
- Verify correct JWT output on valid credentials

üì¶ Notes:
- You can extend this with RBAC role/permission loading from `user_roles` + `roles` tables
- Passwords must be hashed at registration (add `UserService.create()` later)
```
```
Step 12: Configure Drizzle ORM Service in NestJS

üéØ Description:  
Set up a reusable `DrizzleService` in NestJS to handle type-safe SQL operations using **Drizzle ORM**.  
This service will establish a singleton connection to **PostgreSQL via Neon**, using the connection string from `process.env.DATABASE_URL` (defined in Replit Secrets).

üß± Dependencies:  
- Step 9: Database schema created and migrated
- PostgreSQL + Neon ready
- Drizzle configured (drizzle.config.ts exists)

‚öôÔ∏è Actions:

1. ‚úÖ Install required packages (if not already):
```bash
npm install drizzle-orm pg postgres --save
```

2. ‚úÖ Create structure:
```
/src/common/drizzle/drizzle.service.ts
/src/common/drizzle/schema.ts         # (optional - generated schema)
/drizzle.config.ts
```

3. ‚úÖ `drizzle.service.ts` content:
```ts
import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';

@Injectable()
export class DrizzleService implements OnModuleInit, OnModuleDestroy {
  private client = postgres(process.env.DATABASE_URL!, { max: 1 });
  public db = drizzle(this.client);

  async onModuleInit() {
    console.log('[DrizzleService] Connecting to DB...');
    await this.client`SELECT 1`;
    console.log('[DrizzleService] Connected ‚úÖ');
  }

  async onModuleDestroy() {
    console.log('[DrizzleService] Disconnecting...');
    await this.client.end();
  }
}
```

4. ‚úÖ Register service globally or in a dedicated module:
```ts
@Module({
  providers: [DrizzleService],
  exports: [DrizzleService],
})
export class DrizzleModule {}
```

üß™ Validation:
- Log shows: `[DrizzleService] Connected ‚úÖ` on boot
- Add a temporary query to test DB access:
```ts
await drizzleService.db.select().from(users).limit(1);
```

üì¶ Notes:
- Use `schema.ts` for typed table access (generated or hand-written)
- All queries must go through `DrizzleService.db`
- Do **not** instantiate multiple connections

Ready for queue/job/db-heavy logic with full type safety.
```
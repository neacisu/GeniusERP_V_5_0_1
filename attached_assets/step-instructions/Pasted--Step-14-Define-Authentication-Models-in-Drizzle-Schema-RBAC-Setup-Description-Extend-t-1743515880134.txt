```
Step 14: Define Authentication Models in Drizzle Schema (RBAC Setup)

🎯 Description:  
Extend the **Drizzle ORM schema** with authentication and role-based access control (RBAC) tables:  
`users`, `roles`, `permissions`, and `user_roles`.  
This is critical for enforcing multi-tenant security logic across all ERP modules (Section 4.1.5.4).

🧱 Dependencies:  
- Step 8: Base Drizzle schema created  
- Step 12–13: DrizzleService & DrizzleModule operational

⚙️ Actions:

1. ✅ Edit your schema definition file (usually `schema.ts` or inside `/db/schema/`):

```ts
// db/schema/auth.ts
import { pgTable, uuid, text, timestamp, primaryKey, index } from 'drizzle-orm/pg-core';

export const users = pgTable('users', {
  id: uuid('id').primaryKey().defaultRandom(),
  company_id: uuid('company_id').notNull(),
  franchise_id: uuid('franchise_id'),
  email: text('email').unique().notNull(),
  password: text('password').notNull(),
  created_at: timestamp('created_at').defaultNow(),
  updated_at: timestamp('updated_at').defaultNow(),
}, (users) => ({
  companyFranchiseIdx: index('users_company_franchise_idx').on(users.company_id, users.franchise_id),
}));

export const roles = pgTable('roles', {
  id: uuid('id').primaryKey().defaultRandom(),
  company_id: uuid('company_id').notNull(),
  name: text('name').notNull(),
  created_at: timestamp('created_at').defaultNow(),
}, (roles) => ({
  companyIdx: index('roles_company_idx').on(roles.company_id),
}));

export const permissions = pgTable('permissions', {
  id: uuid('id').primaryKey().defaultRandom(),
  company_id: uuid('company_id').notNull(),
  name: text('name').notNull(),
  created_at: timestamp('created_at').defaultNow(),
}, (permissions) => ({
  companyIdx: index('permissions_company_idx').on(permissions.company_id),
}));

export const user_roles = pgTable('user_roles', {
  user_id: uuid('user_id').notNull(),
  role_id: uuid('role_id').notNull(),
}, (user_roles) => ({
  pk: primaryKey(user_roles.user_id, user_roles.role_id),
}));
```

2. ✅ Import it into your `schema.ts`:
```ts
export * from './auth';
```

3. ✅ Run Drizzle introspection & push:
```bash
npx drizzle-kit push:pg
```

🧪 Validation:
- Check that all 4 tables exist in Neon dashboard
- Ensure indexes & constraints are reflected
- Optionally seed users/roles via SQL or CLI

📦 Notes:
- Relations in Drizzle are defined manually at query-time
- Enforce multi-tenancy via `company_id` at service level
- This schema supports many-to-many (users ⇄ roles ⇄ permissions)

You now have full RBAC groundwork using **Drizzle only** — no Prisma involved.
```
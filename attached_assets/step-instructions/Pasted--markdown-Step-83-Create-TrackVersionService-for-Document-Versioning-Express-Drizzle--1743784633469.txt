```markdown
### üìÑ Step 83: Create `TrackVersionService` for Document Versioning (Express + Drizzle)

**üìù Description:**  
Implement the `TrackVersionService` in the **Documents Module** to manage versioned updates of archived documents using Drizzle ORM. This enables tracking historical changes across all document iterations (Section 2.2.2.2).

**üîó Dependencies:**  
- ‚úÖ Step 37: `DocumentsModule` structure created  
- ‚úÖ Drizzle ORM is used for all data persistence  
- ‚úÖ Document and `DocumentVersion` models must be defined in your schema

---

**üìå Prompt for Replit Agent:**

> Build `TrackVersionService` using Express + Drizzle to manage document versioning. Use `drizzle-orm` syntax to fetch and insert versions based on the highest version number for a given document.

---

### üóÇÔ∏è Directory & File:
Create:
```
server/modules/documents/track-version.service.ts
```

---

### üß† Service Implementation:

```ts
// server/modules/documents/track-version.service.ts
import { eq, desc } from "drizzle-orm";
import { db } from "../../core/db"; // Adjust if Drizzle instance path is different
import { documentVersions } from "../../schema"; // Import your drizzle schema

export class TrackVersionService {
  async createVersion(documentId: string, content: string) {
    // Get last version
    const [latest] = await db
      .select()
      .from(documentVersions)
      .where(eq(documentVersions.documentId, documentId))
      .orderBy(desc(documentVersions.version))
      .limit(1);

    const newVersion = (latest?.version || 0) + 1;

    // Insert new version
    const inserted = await db.insert(documentVersions).values({
      documentId,
      content,
      version: newVersion,
      createdAt: new Date(),
    }).returning();

    return inserted[0];
  }
}
```

---

### üõ†Ô∏è Register in Documents Module:

Update `server/modules/documents/documents.module.ts`:

```ts
import { TrackVersionService } from "./track-version.service";

export const DocumentsModule = {
  providers: [
    TrackVersionService,
    // ... other providers
  ],
};
```

---

### ‚úÖ Test Case (Optional):
To verify, run the service manually:

```ts
const tracker = new TrackVersionService();
await tracker.createVersion("doc-123", "Updated content version X");
```

---

This service ensures robust and compliant document versioning, required for archiving, regulatory audits, and rollback functionality.
```
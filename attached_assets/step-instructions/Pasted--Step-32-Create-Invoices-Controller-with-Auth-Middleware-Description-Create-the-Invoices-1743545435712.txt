```
Step 32: Create Invoices Controller with Auth Middleware

🎯 Description:  
Create the `InvoicesController` to expose a **POST** endpoint `/v1/invoices/create`, allowing authenticated users to create invoices.  
This controller should:
- Validate and pass request data to `CreateInvoiceService`
- Be protected with the existing `AuthGuard` (Step 20)
- Use granular Express-style routing (no NestJS)

📦 Technologies:
- Backend: Express (modular NX monorepo)
- Auth: JWT (via custom `AuthGuard`)
- Input: TypeScript DTO
- Logic: Delegated to `CreateInvoiceService`

🧱 Dependencies:
- Step 20: `AuthGuard` implemented
- Step 31: `CreateInvoiceService` ready

⚙️ Instructions:

1. ✅ Create route file:
```
apps/api/src/modules/invoices/routes/create-invoice.route.ts
```

2. ✅ Add Express route handler:
```ts
import { Router } from 'express';
import { AuthGuard } from '@/common/middleware/auth.guard';
import { CreateInvoiceService } from '../services/create-invoice.service';
import { CreateInvoiceInput } from '../types/invoice.input';

const router = Router();

router.post('/v1/invoices/create', AuthGuard, async (req, res) => {
  try {
    const input: CreateInvoiceInput = {
      company_id: req.body.companyId,
      franchise_id: req.body.franchiseId,
      currency: req.body.currency,
      convert_to: req.body.convertTo,
      amount: req.body.amount,
    };

    const result = await CreateInvoiceService.execute(input);
    return res.status(201).json({ success: true, invoice: result });
  } catch (err) {
    console.error('[InvoicesController] Failed to create invoice:', err);
    return res.status(500).json({ success: false, error: 'Internal server error' });
  }
});

export default router;
```

3. ✅ Register the route in app entrypoint:
```
apps/api/src/app.ts
```
```ts
import invoiceRoutes from '@/modules/invoices/routes/create-invoice.route';
app.use(invoiceRoutes);
```

🧪 Validation:
- POST `/v1/invoices/create` with valid JWT works
- Invoice saved with correct values (status = draft, converted if needed)
- Unauthenticated requests return 401

📎 Notes:
- Keep controller logic minimal — all business logic stays in service
- Reuse `AuthGuard` for JWT validation
- Add request validation (Zod or custom) in a future step
```